include k-scaffold
//- Create a tabs construct
+tabs({name:"test-tabs",defaultActiveTab:'background'})(class="outer")
  //- Some basic text to display before the navigation
  span before the header
  //- Our first tab. It's passed an empty object to use the automated naming scheme, but we are specifying a class we want the tab container to have
  +tab({}).tab-vertical
    //- Include an input-label construct in this tab along with some basic text
    +input-label({
      inputObj:{name:'test',type:'text'},
      spanObj:{'data-i18n':'a test label'},
    })
    span(style="background: white;") Tab 1 content
  //- Our second tab. We're specifying a name for this tab and a custom css class
  +tab({name:"background"}).tab_horizontal
    //- This tab's container will contain a basic span and an adaptive number input that will grow as content is added to it
    span(style="background: white;") Tab background content
    +adaptiveInput({name:'test adaptive',type:'number',class:'test-class'})
  //- Another tab with a custom name, and some custom properties on the button. Also uses a different syntax to specify the class name of the tab-container
  +tab({name:"history", button:{class:"custom-button"}})(class="tab_horizontal")
    //- contains some basic text and a select drop down
    span(style="background: white;") Tab history content
    +select({name:'test select',trigger:{affects:['test']}})
      each n in [1,2,3,4]
        - const nObj = {value:n,'data-i18n':'one'};
        if n === 1
          - nObj.selected = '';
        +option(nObj)
  //- Our final tab, which will use a span as it's element to contain the tab, instead of the standard section
  +tab({name:"inventory", container:"span"})(class="tab_horizontal")
    //- The attributes defined in this container will be prefixed with the word `prefixed`.
    - setSystemPrefix('prefixed');
    //- A text input that will be named `attr_prefixed_test_for_pre`
    +text({name:'test for pre'})
    //- A fieldset that will create a repeating section named `repeating_prefixed-section`
    +fieldset({name:'section'})
      //- A repeating number attribute
      +number({name:'bonus'})
      //- A repeating action button that will be used to send a roll
      +roller({name:'do it'})
+action({name:'test-button'})
+kscript.
  // This function would typically be written in a separate js file, which would then be included here, but for this basic example, we are demonstrating everything in one file
  const initiateRoll = async ({trigger,attributes,sections,casc}) =>{
    //- A simple roll function that just sends the name of the button that was clicked.
    const roll = await startRoll(`clicked ${trigger.name}`);
    finishRoll(roll.rollId);
  };
  k.registerFuncs({initiateRoll});