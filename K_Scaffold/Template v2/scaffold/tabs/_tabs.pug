//- @pugdoc
  name: tabs
  description: A generic mixin to create tabs using jQuery. It uses a nested {@link tab} mixin to define tabs. Any content outside those mixin in put in the containing div, before the tabs. Attributes passed to the mixin are passed to the outer containing div.
  arguments:
    - {string} [name=tabs] - The name of the tabs construct. Used in all elements so that you may vary the styling of different tabs
    - {integer} [name=defaultActiveTabIndex] - The name of the tabs construct. Used in all elements so that you may vary the styling of different tabs
  attributes:
  example: |
    include ../_htmlelements.pug
    +tabs("sheet-tabs")(class="outer")
      span before the header
      +tab()(class="tab-vertical")
        span(style="background: white;") Tab 1 content
      +tab("background")(class="tab_horizontal")
        span(style="background: white;") Tab background content
      +tab("history", {class:"custom-button", trigger:{}})(class="tab_horizontal")
        span(style="background: white;") Tab history content
      +tab("inventory", {}, "span")(class="tab_horizontal")
        span(style="background: white;") Tab inventory content
mixin tabs(name="tabs",defaultActiveTabIndex=0)
  //- Cleanup the name to use "-" instead of spaces, and no problematic chars
  //- We use "-" as in action buttons, because this name will be used in CSS classes
  - name = actionButtonName(replaceProblems(name));


  //- Storage for all the tabs in this construct, plus a local mixin to pass
  //- several pug blocks
  - const tabs = [];
  //- @pugdoc
    name: tab
    description: Mixin to add a new tab. Only available inside a {@link tabs} mixin. Attributes passed to the mixin are passed to the div containing the content, not to the header button.
    arguments:
      - {string} [tabName] - The name of the tab. Defaults to `tab` followed by a index count starting at 1 (so tab1, then tab2, ...)
      - {object} [button] - object passed to the +action mixin to build the action button for switching tabe. By default a trigger is defined, but you can override it.
      - {string} [container] - tag to use to contain the whole tab. A div by default but can be overridden.
  mixin tab(tabName,button={},container="div")
    - tabName = actionButtonName(replaceProblems(tabName || `tab${tabs.length + 1}`));
    - if (tabs.filter(tab => tab.name === tabName).length) { throw new Error(`Tab "${tabName}" already exists in "${name}".`); }
    //- Cleanup the name of the navigation button
    - button.name = `nav-tabs-${name}--${tabName}`;
    //- Cleanup the class, add our own internal classes
    - button.class = button.class ? replaceProblems(button.class) : "";
    - button.class = `tabs__button tabs--${name}__button tabs--${name}__button--${tabName} ${button.class}`;
    - button.class = button.class + (tabs.length === defaultActiveTabIndex ? " k-active-tab" : "");
    - button['data-container-button'] = name;
    - button['data-button'] = tabName;

    //- If not provided, hook the button to the default tab switcher listener
    - button.trigger = button.trigger || {triggeredFuncs:["_kSwitchTab"]};
    //- Cleanup the class of the tab content passed through the implicit attributes
    //- and add our own internal classes
    - attributes.class = actionButtonName(replaceProblems(attributes.class || ""));
    - attributes.class = `tabs__container tabs--${name}__container tabs--${name}__container--${tabName} ${attributes.class}`;
    - attributes.class = attributes.class + (tabs.length === defaultActiveTabIndex ? " k-active-tab" : "");
    //- Store the tab definition
    - tabs.push({name:tabName, container, button, attributes, block});
      

  //- Put everything in a global div with appropriate classes for CSS styling
  //- and proper HTML organization
  - attributes.class = actionButtonName(replaceProblems(attributes.class || ""));
  - attributes.class = `tabs tabs--${name} ${attributes.class}`;
  div&attributes(attributes)
    //- Execute the block passed to the +tabs mixin, if any
    //- this fills the `tabs` array above when the +tab nested mixin
    //- is called in the block
    - block ? block() : undefined;

    //- Navigation header with action button to switch tabs
    nav(class=`tabs__header tabs--${name}__header`)
      each tab, index in tabs
        +action(tab.button)(data-container-tab=name data-tab=tab.name data-i18n=`tabs-${name}-${tab.name}`)
          != tab.name
    
    //- Global div storing all the tabs one after another
    //- only one will be visible at the same time
    div(class=`tabs__body tabs--${name}__body`)
      each tab, index in tabs
        - const container = tab.container;
        #{container}(data-container-tab=name data-tab=tab.name)&attributes(tab.attributes)
          - tab.block()