[
    {
        "comment": "/**\r\n * @typedef Roll20Event\r\n * @type {object}\r\n * @property {string} sourceAttribute - The attribute name of the change; undefined for button events.\r\n * @property {string} triggerName - The name of the trigger including the trigger type. E.g. `change:attribute_name` or `clicked:button-name`\r\n * @property {string} sourceType - Who made the change; player (or API) or sheetworker\r\n * @property {string|number} previousValue - The value of the attribute before the change was made\r\n * @property {string|number} newValue - What the attribute value was changed to\r\n * @property {object} removedInfo - The contents of the removed repeating row\r\n */",
        "meta": {
            "filename": "constant_definitions.js",
            "lineno": 1,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\scaffold_type_definitions",
            "code": {}
        },
        "kind": "typedef",
        "name": "Roll20Event",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The attribute name of the change; undefined for button events.",
                "name": "sourceAttribute"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the trigger including the trigger type. E.g. `change:attribute_name` or `clicked:button-name`",
                "name": "triggerName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "Who made the change; player (or API) or sheetworker",
                "name": "sourceType"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "description": "The value of the attribute before the change was made",
                "name": "previousValue"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "description": "What the attribute value was changed to",
                "name": "newValue"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The contents of the removed repeating row",
                "name": "removedInfo"
            }
        ],
        "longname": "Roll20Event",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * An object containing arrays of section ids indexed by section (e.g. `{repeating_inventory:['id1','id2']}`). Is auto generated by the PUG side of the kscaffold.\r\n * @typedef {object} sectionObj\r\n * @property {...sectionIDS[]} sectionname\r\n */",
        "meta": {
            "filename": "constant_definitions.js",
            "lineno": 12,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\scaffold_type_definitions",
            "code": {}
        },
        "description": "An object containing arrays of section ids indexed by section (e.g. `{repeating_inventory:['id1','id2']}`). Is auto generated by the PUG side of the kscaffold.",
        "kind": "typedef",
        "name": "sectionObj",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "Array.<sectionIDS>"
                    ]
                },
                "variable": true,
                "name": "sectionname"
            }
        ],
        "longname": "sectionObj",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * @typedef {object} expandedCascade\r\n * @property {...object} itemName - Object with details of how to handle the attribute or button. Attribute names are used as the key with a prefix of `attr_` and button names are used as the key with a prefix of `act_`. Repeating attributes/buttons should use $x or $X in place of an explicit ID. This will be expanded by the scaffold in response to an event.\r\n * @property {string} itemName.name - The name of the attribute without the `act_` or `attr_` prefix.\r\n * @property {string} itemName.type - The type of the attribute. Autopopulated from the `type` property from the attribute definition in the PUG.\r\n * @property {string=} [itemName.listener] - the listener text to be used in a [roll20 event listener](https://wiki.roll20.net/Sheet_Worker_Scripts#Event_listener).\r\n * @property {string|number} [defaultValue] - The default value of the attribute. Not used for buttons. Autopopulated from the `value` property of the PUG definition of the attribute.\r\n * @property {string=} [itemName.listenerFunc] - Name of function to call from the [roll20 event listener](https://wiki.roll20.net/Sheet_Worker_Scripts#Event_listener). Is used as a string to call the function from the {@link funcs} object.\r\n * @property {string} [itemName.initialFunc] - Name of function to call only when the attribute is the change event that triggered the listener.\r\n * @property {string} [itemName.calculation] - Name of function to call to calculate the value of this attribute.\r\n * @property {string[]} [itemName.triggeredFuncs] - Array of function names that should be called any time this attribute is changed or affected.\r\n * @property {...*} [itemName.yourPropertyName] - Additional properties can be added to this setup via the K-Scaffold's PUG interface.\r\n */",
        "meta": {
            "filename": "constant_definitions.js",
            "lineno": 18,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\scaffold_type_definitions",
            "code": {}
        },
        "kind": "typedef",
        "name": "expandedCascade",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "variable": true,
                "description": "Object with details of how to handle the attribute or button. Attribute names are used as the key with a prefix of `attr_` and button names are used as the key with a prefix of `act_`. Repeating attributes/buttons should use $x or $X in place of an explicit ID. This will be expanded by the scaffold in response to an event.",
                "name": "itemName"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the attribute without the `act_` or `attr_` prefix.",
                "name": "itemName.name"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The type of the attribute. Autopopulated from the `type` property from the attribute definition in the PUG.",
                "name": "itemName.type"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "the listener text to be used in a [roll20 event listener](https://wiki.roll20.net/Sheet_Worker_Scripts#Event_listener).",
                "name": "itemName.listener"
            },
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "optional": true,
                "description": "The default value of the attribute. Not used for buttons. Autopopulated from the `value` property of the PUG definition of the attribute.",
                "name": "defaultValue"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Name of function to call from the [roll20 event listener](https://wiki.roll20.net/Sheet_Worker_Scripts#Event_listener). Is used as a string to call the function from the {@link funcs} object.",
                "name": "itemName.listenerFunc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Name of function to call only when the attribute is the change event that triggered the listener.",
                "name": "itemName.initialFunc"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Name of function to call to calculate the value of this attribute.",
                "name": "itemName.calculation"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "description": "Array of function names that should be called any time this attribute is changed or affected.",
                "name": "itemName.triggeredFuncs"
            },
            {
                "type": {
                    "names": [
                        "*"
                    ]
                },
                "optional": true,
                "variable": true,
                "description": "Additional properties can be added to this setup via the K-Scaffold's PUG interface.",
                "name": "itemName.yourPropertyName"
            }
        ],
        "longname": "expandedCascade",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * @typedef {object} attributesProxy\r\n * @property {string|number} [name_of_attribute] - Your attribute values are stored in the attribute proxy under their attribute names. You can reference the current value of the attribute by calling it directly from the proxy (e.g. `attributes.my_attribute`). This will return either the original value if no changes have been made, or the updated value if changes have previously been applied. Storing an updated value is done by simple assignment (e.g. `attributes.my_attributes = 5`).\r\n * @property {function} set - Applies any updates to the sheet. Also applies any repeating section reorders. This uses ES6 destructuring function argument assignment so all arguments should be passed in as properties of a single object with the indicated keys (e.g. `attributes.set({vocal:true,callback:() => log('attributes were set')})`)\r\n * @property {boolean=} set.vocal - set will not be silent. Inverts the standard behavior of setAttrs options object\r\n * @property {function=} set.callback - A callback to be invoked once the setAttrs is completed\r\n * @property {attributesProxy=} set.attributes - The instance of the attributeProxy to use for further set operations\r\n * @property {object} set.sections - An object containing the idArrays for each repeating section\r\n * @property {object} set.casc - as [the casc property]{@link attributesProxy#casc}\r\n * @property {object} attributes - The original attribute values from the getAttrs call\r\n * @property {object} updates - Any changes that are made by the script are stored here\r\n * @property {object} repOrders - any changes to repeating section orders stored here\r\n * @property {string[]} queue - queue of attributes affected to iterate through. Only used if the whole proxy is passed to attributes.set()\r\n * @property {object} casc - The details of how to handle all attributes as created from the {@link k.cascades} object by [k.getAllAttrs()]{@link k.getAllAttrs}.\r\n * @property {function} processChange - function to iterate through attribute changes for default handling\r\n * @property {function} triggerFunctions - Calls functions that are triggered whenever an attribute is changed or affected\r\n * @property {function} initialFunction - Calls functions that are only triggered when an attribute is the triggering event\r\n * @property {function} getCascObj - Gets the appropriate cascade object for a given attribute or action button\r\n */",
        "meta": {
            "filename": "attributesProxy.js",
            "lineno": 1,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\scaffold_type_definitions",
            "code": {}
        },
        "kind": "typedef",
        "name": "attributesProxy",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "optional": true,
                "description": "Your attribute values are stored in the attribute proxy under their attribute names. You can reference the current value of the attribute by calling it directly from the proxy (e.g. `attributes.my_attribute`). This will return either the original value if no changes have been made, or the updated value if changes have previously been applied. Storing an updated value is done by simple assignment (e.g. `attributes.my_attributes = 5`).",
                "name": "name_of_attribute"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Applies any updates to the sheet. Also applies any repeating section reorders. This uses ES6 destructuring function argument assignment so all arguments should be passed in as properties of a single object with the indicated keys (e.g. `attributes.set({vocal:true,callback:() => log('attributes were set')})`)",
                "name": "set"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "set will not be silent. Inverts the standard behavior of setAttrs options object",
                "name": "set.vocal"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A callback to be invoked once the setAttrs is completed",
                "name": "set.callback"
            },
            {
                "type": {
                    "names": [
                        "attributesProxy"
                    ]
                },
                "optional": true,
                "description": "The instance of the attributeProxy to use for further set operations",
                "name": "set.attributes"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "An object containing the idArrays for each repeating section",
                "name": "set.sections"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "as [the casc property]{@link attributesProxy#casc}",
                "name": "set.casc"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The original attribute values from the getAttrs call",
                "name": "attributes"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Any changes that are made by the script are stored here",
                "name": "updates"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "any changes to repeating section orders stored here",
                "name": "repOrders"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "queue of attributes affected to iterate through. Only used if the whole proxy is passed to attributes.set()",
                "name": "queue"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The details of how to handle all attributes as created from the {@link k.cascades} object by [k.getAllAttrs()]{@link k.getAllAttrs}.",
                "name": "casc"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function to iterate through attribute changes for default handling",
                "name": "processChange"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Calls functions that are triggered whenever an attribute is changed or affected",
                "name": "triggerFunctions"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Calls functions that are only triggered when an attribute is the triggering event",
                "name": "initialFunction"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Gets the appropriate cascade object for a given attribute or action button",
                "name": "getCascObj"
            }
        ],
        "longname": "attributesProxy",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * The attributes object that is generated via [createAttrProxy()]{@link createAttrProxy}, and used in [k.getAttrs()]{@link k.getAttrs} & [k.getAllAttrs()]{@link k.getAllAttrs}. This is a proxy for the basic attributes object passed to the callback in the sheetworker [getAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getAttrs.28attributeNameArray.2C_callback.29).\r\n * @const {object}\r\n * @property {string|number} [name_of_attribute] - Your attribute values are stored in the attribute proxy under their attribute names. You can reference the current value of the attribute by calling it directly from the proxy (e.g. `attributes.my_attribute`). This will return either the original value if no changes have been made, or the updated value if changes have previously been applied. Storing an updated value is done by simple assignment (e.g. `attributes.my_attributes = 5`).\r\n * @property {function} set - Applies any updates to the sheet. Also applies any repeating section reorders. This uses ES6 destructuring function argument assignment so all arguments should be passed in as properties of a single object with the indicated keys (e.g. `attributes.set({vocal:true,callback:() => log('attributes were set')})`)\r\n * @property {boolean=} set.vocal - set will not be silent. Inverts the standard behavior of setAttrs options object\r\n * @property {function=} set.callback - A callback to be invoked once the setAttrs is completed\r\n * @property {attributesProxy=} set.attributes - The instance of the attributeProxy to use for further set operations\r\n * @property {object} set.sections - An object containing the idArrays for each repeating section\r\n * @property {object} set.casc - as [the casc property]{@link attributesProxy#casc}\r\n * @property {object} attributes - The original attribute values from the getAttrs call\r\n * @property {object} updates - Any changes that are made by the script are stored here\r\n * @property {object} repOrders - any changes to repeating section orders stored here\r\n * @property {string[]} queue - queue of attributes affected to iterate through. Only used if the whole proxy is passed to attributes.set()\r\n * @property {object} casc - The details of how to handle all attributes\r\n * @property {function} processChange - function to iterate through attribute changes for default handling\r\n * @property {function} triggerFunctions - Calls functions that are triggered whenever an attribute is changed or affected\r\n * @property {function} initialFunction - Calls functions that are only triggered when an attribute is the triggering event\r\n * @property {function} getCascObj - Gets the appropriate cascade object for a given attribute or action button\r\n */",
        "meta": {
            "range": [
                5147,
                5167
            ],
            "filename": "attributesProxy.js",
            "lineno": 41,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\scaffold_type_definitions",
            "code": {
                "id": "astnode100000005",
                "name": "attributesProxy",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "description": "The attributes object that is generated via [createAttrProxy()]{@link createAttrProxy}, and used in [k.getAttrs()]{@link k.getAttrs} & [k.getAllAttrs()]{@link k.getAllAttrs}. This is a proxy for the basic attributes object passed to the callback in the sheetworker [getAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getAttrs.28attributeNameArray.2C_callback.29).",
        "kind": "constant",
        "type": {
            "names": [
                "object"
            ]
        },
        "properties": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "optional": true,
                "description": "Your attribute values are stored in the attribute proxy under their attribute names. You can reference the current value of the attribute by calling it directly from the proxy (e.g. `attributes.my_attribute`). This will return either the original value if no changes have been made, or the updated value if changes have previously been applied. Storing an updated value is done by simple assignment (e.g. `attributes.my_attributes = 5`).",
                "name": "name_of_attribute"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Applies any updates to the sheet. Also applies any repeating section reorders. This uses ES6 destructuring function argument assignment so all arguments should be passed in as properties of a single object with the indicated keys (e.g. `attributes.set({vocal:true,callback:() => log('attributes were set')})`)",
                "name": "set"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "description": "set will not be silent. Inverts the standard behavior of setAttrs options object",
                "name": "set.vocal"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "A callback to be invoked once the setAttrs is completed",
                "name": "set.callback"
            },
            {
                "type": {
                    "names": [
                        "attributesProxy"
                    ]
                },
                "optional": true,
                "description": "The instance of the attributeProxy to use for further set operations",
                "name": "set.attributes"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "An object containing the idArrays for each repeating section",
                "name": "set.sections"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "as [the casc property]{@link attributesProxy#casc}",
                "name": "set.casc"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The original attribute values from the getAttrs call",
                "name": "attributes"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Any changes that are made by the script are stored here",
                "name": "updates"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "any changes to repeating section orders stored here",
                "name": "repOrders"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "queue of attributes affected to iterate through. Only used if the whole proxy is passed to attributes.set()",
                "name": "queue"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The details of how to handle all attributes",
                "name": "casc"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "function to iterate through attribute changes for default handling",
                "name": "processChange"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Calls functions that are triggered whenever an attribute is changed or affected",
                "name": "triggerFunctions"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Calls functions that are only triggered when an attribute is the triggering event",
                "name": "initialFunction"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "Gets the appropriate cascade object for a given attribute or action button",
                "name": "getCascObj"
            }
        ],
        "name": "attributesProxy",
        "longname": "attributesProxy",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                136,
                1670
            ],
            "filename": "accessSheet.js",
            "lineno": 4,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000011",
                "name": "updateSheet",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "updateSheet",
        "longname": "updateSheet",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                204,
                235
            ],
            "filename": "accessSheet.js",
            "lineno": 6,
            "columnno": 15,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000023",
                "name": "props",
                "type": "ArrayExpression",
                "value": "[\"debug_mode\",\"\"]"
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "props",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                236,
                1664
            ],
            "filename": "accessSheet.js",
            "lineno": 6,
            "columnno": 47,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000028",
                "name": "callback",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "kFuncs.debugMode": "kFuncs.debugMode",
                "": null,
                "attributes.sheet_version": "attributes.sheet_version"
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "callback",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                280,
                342
            ],
            "filename": "accessSheet.js",
            "lineno": 7,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000035",
                "name": "kFuncs.debugMode",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "debugMode",
        "longname": "kFuncs.debugMode",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                356,
                394
            ],
            "filename": "accessSheet.js",
            "lineno": 8,
            "columnno": 11,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000052",
                "name": "sheet_version",
                "type": "MemberExpression",
                "value": "attributes.sheet_version"
            }
        },
        "undocumented": true,
        "name": "sheet_version",
        "longname": "sheet_version",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                624,
                634
            ],
            "filename": "accessSheet.js",
            "lineno": 13,
            "columnno": 27,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000095",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                635,
                643
            ],
            "filename": "accessSheet.js",
            "lineno": 13,
            "columnno": 38,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000097",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                644,
                648
            ],
            "filename": "accessSheet.js",
            "lineno": 13,
            "columnno": 47,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000099",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                934,
                944
            ],
            "filename": "accessSheet.js",
            "lineno": 21,
            "columnno": 19,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000134",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                945,
                953
            ],
            "filename": "accessSheet.js",
            "lineno": 21,
            "columnno": 30,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000136",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                954,
                958
            ],
            "filename": "accessSheet.js",
            "lineno": 21,
            "columnno": 39,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000138",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1169,
                1179
            ],
            "filename": "accessSheet.js",
            "lineno": 28,
            "columnno": 25,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000173",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1180,
                1188
            ],
            "filename": "accessSheet.js",
            "lineno": 28,
            "columnno": 36,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000175",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1189,
                1193
            ],
            "filename": "accessSheet.js",
            "lineno": 28,
            "columnno": 45,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000177",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1355,
                1365
            ],
            "filename": "accessSheet.js",
            "lineno": 33,
            "columnno": 20,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000191",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1366,
                1374
            ],
            "filename": "accessSheet.js",
            "lineno": 33,
            "columnno": 31,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000193",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1383,
                1424
            ],
            "filename": "accessSheet.js",
            "lineno": 34,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000196",
                "name": "attributes.sheet_version",
                "type": "MemberExpression",
                "value": "kFuncs.version",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sheet_version",
        "longname": "attributes.sheet_version",
        "kind": "member",
        "memberof": "attributes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1681,
                1762
            ],
            "filename": "accessSheet.js",
            "lineno": 46,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000241",
                "name": "initialSetup",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "initialSetup",
        "longname": "initialSetup",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\r\n * This is the default listener function for attributes that the K-Scaffold uses. It utilizes the `triggerFuncs`, `listenerFunc`, `calculation`, and `affects` properties of the K-scaffold trigger object (see the Pug section of the scaffold for more details).\r\n * @param {Roll20Event} event\r\n * @returns {void}\r\n * @example\r\n * //Call from an attribute change\r\n * on('change:an_attribute',k.accessSheet);\r\n */",
        "meta": {
            "range": [
                2188,
                2474
            ],
            "filename": "accessSheet.js",
            "lineno": 58,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000252",
                "name": "accessSheet",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "This is the default listener function for attributes that the K-Scaffold uses. It utilizes the `triggerFuncs`, `listenerFunc`, `calculation`, and `affects` properties of the K-scaffold trigger object (see the Pug section of the scaffold for more details).",
        "params": [
            {
                "type": {
                    "names": [
                        "Roll20Event"
                    ]
                },
                "name": "event"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "void"
                    ]
                }
            }
        ],
        "examples": [
            "//Call from an attribute change\ron('change:an_attribute',k.accessSheet);"
        ],
        "name": "accessSheet",
        "longname": "accessSheet",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2229,
                2253
            ],
            "filename": "accessSheet.js",
            "lineno": 59,
            "columnno": 9,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000261",
                "name": "funcs",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "funcs",
        "longname": "funcs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2267,
                2272
            ],
            "filename": "accessSheet.js",
            "lineno": 60,
            "columnno": 9,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000271",
                "name": "event",
                "type": "Identifier",
                "value": "event"
            }
        },
        "undocumented": true,
        "name": "event",
        "longname": "event",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2292,
                2297
            ],
            "filename": "accessSheet.js",
            "lineno": 61,
            "columnno": 15,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000277",
                "name": "event",
                "type": "Identifier",
                "value": "event"
            }
        },
        "undocumented": true,
        "name": "event",
        "longname": "event",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2298,
                2468
            ],
            "filename": "accessSheet.js",
            "lineno": 61,
            "columnno": 21,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000279",
                "name": "callback",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "trigger": "callback~trigger"
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "callback",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2346,
                2389
            ],
            "filename": "accessSheet.js",
            "lineno": 62,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000286",
                "name": "trigger",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "callback~trigger",
        "kind": "member",
        "memberof": "callback",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2422,
                2427
            ],
            "filename": "accessSheet.js",
            "lineno": 63,
            "columnno": 30,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000300",
                "name": "event",
                "type": "Identifier",
                "value": "event"
            }
        },
        "undocumented": true,
        "name": "event",
        "longname": "event",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2428,
                2435
            ],
            "filename": "accessSheet.js",
            "lineno": 63,
            "columnno": 36,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000302",
                "name": "trigger",
                "type": "Identifier",
                "value": "trigger"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2436,
                2446
            ],
            "filename": "accessSheet.js",
            "lineno": 63,
            "columnno": 44,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000304",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2447,
                2455
            ],
            "filename": "accessSheet.js",
            "lineno": 63,
            "columnno": 55,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000306",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2456,
                2460
            ],
            "filename": "accessSheet.js",
            "lineno": 63,
            "columnno": 64,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000308",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2477,
                2508
            ],
            "filename": "accessSheet.js",
            "lineno": 66,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000311",
                "name": "funcs.accessSheet",
                "type": "Identifier",
                "value": "accessSheet",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "accessSheet",
        "longname": "funcs.accessSheet",
        "kind": "member",
        "memberof": "funcs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                129,
                6107
            ],
            "filename": "attribute_proxy.js",
            "lineno": 4,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000319",
                "name": "createAttrProxy",
                "type": "FunctionExpression"
            },
            "vars": {
                "getCascObj": "createAttrProxy~getCascObj",
                "": null,
                "triggerFunctions": "createAttrProxy~triggerFunctions",
                "initialFunction": "createAttrProxy~initialFunction",
                "processChange": "createAttrProxy~processChange",
                "attrTarget": "createAttrProxy~attrTarget",
                "attrHandler": "createAttrProxy~attrHandler"
            }
        },
        "undocumented": true,
        "name": "createAttrProxy",
        "longname": "createAttrProxy",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                267,
                638
            ],
            "filename": "attribute_proxy.js",
            "lineno": 6,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000325",
                "name": "getCascObj",
                "type": "FunctionExpression"
            },
            "vars": {
                "eventName": "createAttrProxy~getCascObj~eventName",
                "typePrefix": "createAttrProxy~getCascObj~typePrefix",
                "cascName": "createAttrProxy~getCascObj~cascName",
                "cascObj": "createAttrProxy~getCascObj~cascObj"
            }
        },
        "undocumented": true,
        "name": "getCascObj",
        "longname": "createAttrProxy~getCascObj",
        "kind": "function",
        "memberof": "createAttrProxy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                313,
                367
            ],
            "filename": "attribute_proxy.js",
            "lineno": 7,
            "columnno": 10,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000332",
                "name": "eventName",
                "type": "LogicalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "eventName",
        "longname": "createAttrProxy~getCascObj~eventName",
        "kind": "constant",
        "memberof": "createAttrProxy~getCascObj",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                378,
                504
            ],
            "filename": "attribute_proxy.js",
            "lineno": 8,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000342",
                "name": "typePrefix",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "typePrefix",
        "longname": "createAttrProxy~getCascObj~typePrefix",
        "kind": "member",
        "memberof": "createAttrProxy~getCascObj",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                515,
                576
            ],
            "filename": "attribute_proxy.js",
            "lineno": 13,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000358",
                "name": "cascName",
                "type": "TemplateLiteral",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "cascName",
        "longname": "createAttrProxy~getCascObj~cascName",
        "kind": "member",
        "memberof": "createAttrProxy~getCascObj",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                587,
                611
            ],
            "filename": "attribute_proxy.js",
            "lineno": 14,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000372",
                "name": "cascObj",
                "type": "MemberExpression",
                "value": "casc[undefined]"
            }
        },
        "undocumented": true,
        "name": "cascObj",
        "longname": "createAttrProxy~getCascObj~cascObj",
        "kind": "member",
        "memberof": "createAttrProxy~getCascObj",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                653,
                1083
            ],
            "filename": "attribute_proxy.js",
            "lineno": 18,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000380",
                "name": "triggerFunctions",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "triggerFunctions",
        "longname": "createAttrProxy~triggerFunctions",
        "kind": "function",
        "memberof": "createAttrProxy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                918,
                929
            ],
            "filename": "attribute_proxy.js",
            "lineno": 22,
            "columnno": 21,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000429",
                "name": "trigger",
                "type": "Identifier",
                "value": "obj"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                930,
                940
            ],
            "filename": "attribute_proxy.js",
            "lineno": 22,
            "columnno": 33,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000431",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                941,
                949
            ],
            "filename": "attribute_proxy.js",
            "lineno": 22,
            "columnno": 44,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000433",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1098,
                1466
            ],
            "filename": "attribute_proxy.js",
            "lineno": 27,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000447",
                "name": "initialFunction",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "initialFunction",
        "longname": "createAttrProxy~initialFunction",
        "kind": "function",
        "memberof": "createAttrProxy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1293,
                1304
            ],
            "filename": "attribute_proxy.js",
            "lineno": 31,
            "columnno": 32,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000482",
                "name": "trigger",
                "type": "Identifier",
                "value": "obj"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1305,
                1315
            ],
            "filename": "attribute_proxy.js",
            "lineno": 31,
            "columnno": 44,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000484",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1316,
                1324
            ],
            "filename": "attribute_proxy.js",
            "lineno": 31,
            "columnno": 55,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000486",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1477,
                2731
            ],
            "filename": "attribute_proxy.js",
            "lineno": 35,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000502",
                "name": "processChange",
                "type": "FunctionExpression"
            },
            "vars": {
                "attributes[undefined]": null
            }
        },
        "undocumented": true,
        "name": "processChange",
        "longname": "createAttrProxy~processChange",
        "kind": "function",
        "memberof": "createAttrProxy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1503,
                1508
            ],
            "filename": "attribute_proxy.js",
            "lineno": 35,
            "columnno": 34,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000506",
                "name": "event",
                "type": "Identifier",
                "value": "event"
            }
        },
        "undocumented": true,
        "name": "event",
        "longname": "event",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1509,
                1516
            ],
            "filename": "attribute_proxy.js",
            "lineno": 35,
            "columnno": 40,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000508",
                "name": "trigger",
                "type": "Identifier",
                "value": "trigger"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1517,
                1527
            ],
            "filename": "attribute_proxy.js",
            "lineno": 35,
            "columnno": 48,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000510",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1528,
                1536
            ],
            "filename": "attribute_proxy.js",
            "lineno": 35,
            "columnno": 59,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000512",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1537,
                1541
            ],
            "filename": "attribute_proxy.js",
            "lineno": 35,
            "columnno": 68,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000514",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1557,
                1564
            ],
            "filename": "attribute_proxy.js",
            "lineno": 36,
            "columnno": 11,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000521",
                "name": "trigger",
                "type": "Identifier",
                "value": "trigger"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2314,
                2403
            ],
            "filename": "attribute_proxy.js",
            "lineno": 54,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000608",
                "name": "attributes[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attributes[undefined]",
        "longname": "attributes[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2369,
                2376
            ],
            "filename": "attribute_proxy.js",
            "lineno": 54,
            "columnno": 63,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000621",
                "name": "trigger",
                "type": "Identifier",
                "value": "trigger"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2377,
                2387
            ],
            "filename": "attribute_proxy.js",
            "lineno": 54,
            "columnno": 71,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000623",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2388,
                2396
            ],
            "filename": "attribute_proxy.js",
            "lineno": 54,
            "columnno": 82,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000625",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2397,
                2401
            ],
            "filename": "attribute_proxy.js",
            "lineno": 54,
            "columnno": 91,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000627",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2699,
                2709
            ],
            "filename": "attribute_proxy.js",
            "lineno": 62,
            "columnno": 20,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000676",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2710,
                2718
            ],
            "filename": "attribute_proxy.js",
            "lineno": 62,
            "columnno": 31,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000678",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2719,
                2723
            ],
            "filename": "attribute_proxy.js",
            "lineno": 62,
            "columnno": 40,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000680",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2742,
                2936
            ],
            "filename": "attribute_proxy.js",
            "lineno": 64,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000683",
                "name": "attrTarget",
                "type": "ObjectExpression",
                "value": "{\"updates\":\"\",\"attributes\":\"\",\"repOrders\":\"\",\"queue\":\"\",\"casc\":\"\",\"processChange\":\"\",\"triggerFunctions\":\"\",\"initialFunction\":\"\",\"getCascObj\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "attrTarget",
        "longname": "createAttrProxy~attrTarget",
        "kind": "constant",
        "memberof": "createAttrProxy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2762,
                2772
            ],
            "filename": "attribute_proxy.js",
            "lineno": 65,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000686",
                "name": "updates",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "updates",
        "longname": "createAttrProxy~attrTarget.updates",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2779,
                2800
            ],
            "filename": "attribute_proxy.js",
            "lineno": 66,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000688",
                "name": "attributes",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "createAttrProxy~attrTarget.attributes",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2807,
                2819
            ],
            "filename": "attribute_proxy.js",
            "lineno": 67,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000692",
                "name": "repOrders",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "repOrders",
        "longname": "createAttrProxy~attrTarget.repOrders",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2826,
                2835
            ],
            "filename": "attribute_proxy.js",
            "lineno": 68,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000694",
                "name": "queue",
                "type": "ArrayExpression",
                "value": "[]"
            }
        },
        "undocumented": true,
        "name": "queue",
        "longname": "createAttrProxy~attrTarget.queue",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2842,
                2849
            ],
            "filename": "attribute_proxy.js",
            "lineno": 69,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000696",
                "name": "casc",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "createAttrProxy~attrTarget.casc",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2856,
                2869
            ],
            "filename": "attribute_proxy.js",
            "lineno": 70,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000698",
                "name": "processChange",
                "type": "Identifier",
                "value": "processChange"
            }
        },
        "undocumented": true,
        "name": "processChange",
        "longname": "createAttrProxy~attrTarget.processChange",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2876,
                2892
            ],
            "filename": "attribute_proxy.js",
            "lineno": 71,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000700",
                "name": "triggerFunctions",
                "type": "Identifier",
                "value": "triggerFunctions"
            }
        },
        "undocumented": true,
        "name": "triggerFunctions",
        "longname": "createAttrProxy~attrTarget.triggerFunctions",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2899,
                2914
            ],
            "filename": "attribute_proxy.js",
            "lineno": 72,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000702",
                "name": "initialFunction",
                "type": "Identifier",
                "value": "initialFunction"
            }
        },
        "undocumented": true,
        "name": "initialFunction",
        "longname": "createAttrProxy~attrTarget.initialFunction",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2921,
                2931
            ],
            "filename": "attribute_proxy.js",
            "lineno": 73,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000704",
                "name": "getCascObj",
                "type": "Identifier",
                "value": "getCascObj"
            }
        },
        "undocumented": true,
        "name": "getCascObj",
        "longname": "createAttrProxy~attrTarget.getCascObj",
        "kind": "member",
        "memberof": "createAttrProxy~attrTarget",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2947,
                6058
            ],
            "filename": "attribute_proxy.js",
            "lineno": 75,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000707",
                "name": "attrHandler",
                "type": "ObjectExpression",
                "value": "{\"get\":\"\",\"set\":\"\",\"deleteProperty\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "attrHandler",
        "longname": "createAttrProxy~attrHandler",
        "kind": "constant",
        "memberof": "createAttrProxy",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2968,
                5132
            ],
            "filename": "attribute_proxy.js",
            "lineno": 76,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000710",
                "name": "get",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null,
                "retValue": "createAttrProxy~attrHandler.get~retValue",
                "cascRef": "createAttrProxy~attrHandler.get~cascRef",
                "numRetVal": "createAttrProxy~attrHandler.get~numRetVal"
            }
        },
        "undocumented": true,
        "name": "get",
        "longname": "createAttrProxy~attrHandler.get",
        "kind": "function",
        "memberof": "createAttrProxy~attrHandler",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3215,
                3225
            ],
            "filename": "attribute_proxy.js",
            "lineno": 80,
            "columnno": 15,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000726",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3226,
                3234
            ],
            "filename": "attribute_proxy.js",
            "lineno": 80,
            "columnno": 26,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000728",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3235,
                3239
            ],
            "filename": "attribute_proxy.js",
            "lineno": 80,
            "columnno": 35,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000730",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3240,
                3248
            ],
            "filename": "attribute_proxy.js",
            "lineno": 80,
            "columnno": 40,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000732",
                "name": "callback",
                "type": "Identifier",
                "value": "callback"
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "callback",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3249,
                3254
            ],
            "filename": "attribute_proxy.js",
            "lineno": 80,
            "columnno": 49,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000734",
                "name": "vocal",
                "type": "Identifier",
                "value": "vocal"
            }
        },
        "undocumented": true,
        "name": "vocal",
        "longname": "vocal",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3383,
                3421
            ],
            "filename": "attribute_proxy.js",
            "lineno": 82,
            "columnno": 16,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000758",
                "name": "triggerName",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "triggerName",
        "longname": "<anonymous>~triggerName",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3440,
                3496
            ],
            "filename": "attribute_proxy.js",
            "lineno": 83,
            "columnno": 16,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000767",
                "name": "trigger",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "<anonymous>~trigger",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3462,
                3489
            ],
            "filename": "attribute_proxy.js",
            "lineno": 83,
            "columnno": 38,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000772",
                "name": "sourceAttribute",
                "type": "Identifier",
                "value": "triggerName"
            }
        },
        "undocumented": true,
        "name": "sourceAttribute",
        "longname": "sourceAttribute",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3537,
                3544
            ],
            "filename": "attribute_proxy.js",
            "lineno": 84,
            "columnno": 38,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000781",
                "name": "trigger",
                "type": "Identifier",
                "value": "trigger"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3545,
                3555
            ],
            "filename": "attribute_proxy.js",
            "lineno": 84,
            "columnno": 46,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000783",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3556,
                3564
            ],
            "filename": "attribute_proxy.js",
            "lineno": 84,
            "columnno": 57,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000785",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3565,
                3569
            ],
            "filename": "attribute_proxy.js",
            "lineno": 84,
            "columnno": 66,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000787",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3611,
                3630
            ],
            "filename": "attribute_proxy.js",
            "lineno": 86,
            "columnno": 19,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000794",
                "name": "updates",
                "type": "MemberExpression",
                "value": "obj.updates"
            }
        },
        "undocumented": true,
        "name": "updates",
        "longname": "updates",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3651,
                3960
            ],
            "filename": "attribute_proxy.js",
            "lineno": 87,
            "columnno": 16,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000799",
                "name": "trueCallback",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "trueCallback",
        "longname": "<anonymous>~trueCallback",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4015,
                4053
            ],
            "filename": "attribute_proxy.js",
            "lineno": 95,
            "columnno": 52,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000851",
                "name": "obj.attributes[undefined]",
                "type": "MemberExpression",
                "value": "obj.updates[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "obj.attributes[undefined]",
        "longname": "<anonymous>.obj.attributes[undefined]",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4075,
                4095
            ],
            "filename": "attribute_proxy.js",
            "lineno": 96,
            "columnno": 18,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000863",
                "name": "update",
                "type": "MemberExpression",
                "value": "obj.updates"
            }
        },
        "undocumented": true,
        "name": "update",
        "longname": "<anonymous>~update",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4110,
                4126
            ],
            "filename": "attribute_proxy.js",
            "lineno": 97,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000869",
                "name": "obj.updates",
                "type": "ObjectExpression",
                "value": "{}",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "updates",
        "longname": "obj.updates",
        "kind": "member",
        "memberof": "obj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4324,
                4332
            ],
            "filename": "attribute_proxy.js",
            "lineno": 104,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000904",
                "name": "retValue"
            }
        },
        "undocumented": true,
        "name": "retValue",
        "longname": "createAttrProxy~attrHandler.get~retValue",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4422,
                4452
            ],
            "filename": "attribute_proxy.js",
            "lineno": 107,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000917",
                "name": "retValue",
                "type": "MemberExpression",
                "funcscope": "createAttrProxy~attrHandler.get",
                "value": "obj.repOrders[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "retValue",
        "longname": "createAttrProxy~attrHandler.get~retValue",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4537,
                4565
            ],
            "filename": "attribute_proxy.js",
            "lineno": 110,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000934",
                "name": "retValue",
                "type": "MemberExpression",
                "funcscope": "createAttrProxy~attrHandler.get",
                "value": "obj.updates[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "retValue",
        "longname": "createAttrProxy~attrHandler.get~retValue",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4620,
                4651
            ],
            "filename": "attribute_proxy.js",
            "lineno": 113,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000944",
                "name": "retValue",
                "type": "MemberExpression",
                "funcscope": "createAttrProxy~attrHandler.get",
                "value": "obj.attributes[undefined]",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "retValue",
        "longname": "createAttrProxy~attrHandler.get~retValue",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4697,
                4764
            ],
            "filename": "attribute_proxy.js",
            "lineno": 116,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000953",
                "name": "cascRef",
                "type": "TemplateLiteral",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "cascRef",
        "longname": "createAttrProxy~attrHandler.get~cascRef",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4779,
                4800
            ],
            "filename": "attribute_proxy.js",
            "lineno": 117,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000965",
                "name": "numRetVal",
                "type": "UnaryExpression",
                "value": "+retValue"
            }
        },
        "undocumented": true,
        "name": "numRetVal",
        "longname": "createAttrProxy~attrHandler.get~numRetVal",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4871,
                4891
            ],
            "filename": "attribute_proxy.js",
            "lineno": 119,
            "columnno": 10,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100000982",
                "name": "retValue",
                "type": "Identifier",
                "funcscope": "createAttrProxy~attrHandler.get",
                "value": "numRetVal",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "retValue",
        "longname": "createAttrProxy~attrHandler.get~retValue",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5037,
                5078
            ],
            "filename": "attribute_proxy.js",
            "lineno": 121,
            "columnno": 10,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001008",
                "name": "retValue",
                "type": "MemberExpression",
                "funcscope": "createAttrProxy~attrHandler.get",
                "value": "cascades[undefined].defaultValue",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "retValue",
        "longname": "createAttrProxy~attrHandler.get~retValue",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.get",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5139,
                5829
            ],
            "filename": "attribute_proxy.js",
            "lineno": 126,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001017",
                "name": "set",
                "type": "FunctionExpression"
            },
            "vars": {
                "section": "createAttrProxy~attrHandler.set~section",
                "obj.repOrders[undefined]": "obj.repOrders[undefined]",
                "obj.updates[undefined]": "obj.updates[undefined]"
            }
        },
        "undocumented": true,
        "name": "set",
        "longname": "createAttrProxy~attrHandler.set",
        "kind": "function",
        "memberof": "createAttrProxy~attrHandler",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5406,
                5445
            ],
            "filename": "attribute_proxy.js",
            "lineno": 131,
            "columnno": 14,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001042",
                "name": "section",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "section",
        "longname": "createAttrProxy~attrHandler.set~section",
        "kind": "member",
        "memberof": "createAttrProxy~attrHandler.set",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5458,
                5488
            ],
            "filename": "attribute_proxy.js",
            "lineno": 132,
            "columnno": 10,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001051",
                "name": "obj.repOrders[undefined]",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "repOrders[undefined]",
        "longname": "obj.repOrders[undefined]",
        "kind": "member",
        "memberof": "obj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5636,
                5661
            ],
            "filename": "attribute_proxy.js",
            "lineno": 136,
            "columnno": 10,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001090",
                "name": "obj.updates[undefined]",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "updates[undefined]",
        "longname": "obj.updates[undefined]",
        "kind": "member",
        "memberof": "obj",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5836,
                6053
            ],
            "filename": "attribute_proxy.js",
            "lineno": 143,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001109",
                "name": "deleteProperty",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "deleteProperty",
        "longname": "createAttrProxy~attrHandler.deleteProperty",
        "kind": "function",
        "memberof": "createAttrProxy~attrHandler",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Function that registers a function for being called via the funcs object. Returns true if the function was successfully registered, and false if it could not be registered for any reason.\r\n * @param {object} funcObj - Object with keys that are names to register functions under and values that are functions.\r\n * @param {object} optionsObj - Object that contains options to use for this registration.\r\n * @param {string[]} optionsObj.type - Array that contains the types of specialized functions that apply to the functions being registered. Valid types are `\"opener\"`, `\"updater\"`, and `\"default\"`. `\"default\"` is always used, and never needs to be passed.\r\n * @returns {boolean} - True if the registration succeeded, false if it failed.\r\n * @example\r\n * //Basic Registration\r\n * const myFunc = function(){};\r\n * k.registerFuncs({myFunc});\r\n * //Register a function to run on sheet open\r\n * const openFunc = function(){};\r\n * k.registerFuncs({openFunc},{type:['opener']})\r\n */",
        "meta": {
            "range": [
                7107,
                8142
            ],
            "filename": "attribute_proxy.js",
            "lineno": 168,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001142",
                "name": "registerFuncs",
                "type": "FunctionExpression"
            },
            "vars": {
                "typeArr": "registerFuncs~typeArr",
                "typeSwitch": "registerFuncs~typeSwitch",
                "setState": "registerFuncs~setState",
                "": null
            }
        },
        "description": "Function that registers a function for being called via the funcs object. Returns true if the function was successfully registered, and false if it could not be registered for any reason.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object with keys that are names to register functions under and values that are functions.",
                "name": "funcObj"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object that contains options to use for this registration.",
                "name": "optionsObj"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Array that contains the types of specialized functions that apply to the functions being registered. Valid types are `\"opener\"`, `\"updater\"`, and `\"default\"`. `\"default\"` is always used, and never needs to be passed.",
                "name": "optionsObj.type"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "- True if the registration succeeded, false if it failed."
            }
        ],
        "examples": [
            "//Basic Registration\rconst myFunc = function(){};\rk.registerFuncs({myFunc});\r//Register a function to run on sheet open\rconst openFunc = function(){};\rk.registerFuncs({openFunc},{type:['opener']})"
        ],
        "name": "registerFuncs",
        "longname": "registerFuncs",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7345,
                7417
            ],
            "filename": "attribute_proxy.js",
            "lineno": 173,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001169",
                "name": "typeArr",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "typeArr",
        "longname": "registerFuncs~typeArr",
        "kind": "constant",
        "memberof": "registerFuncs",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7428,
                7553
            ],
            "filename": "attribute_proxy.js",
            "lineno": 174,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001184",
                "name": "typeSwitch",
                "type": "ObjectExpression",
                "value": "{\"undefined\":\"\"}"
            }
        },
        "undocumented": true,
        "name": "typeSwitch",
        "longname": "registerFuncs~typeSwitch",
        "kind": "constant",
        "memberof": "registerFuncs",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7448,
                7469
            ],
            "filename": "attribute_proxy.js",
            "lineno": 175,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001187",
                "name": "opener",
                "type": "Identifier",
                "value": "openHandlers"
            }
        },
        "undocumented": true,
        "name": "opener",
        "longname": "registerFuncs~typeSwitch.opener",
        "kind": "member",
        "memberof": "registerFuncs~typeSwitch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7476,
                7500
            ],
            "filename": "attribute_proxy.js",
            "lineno": 176,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001189",
                "name": "updater",
                "type": "Identifier",
                "value": "updateHandlers"
            }
        },
        "undocumented": true,
        "name": "updater",
        "longname": "registerFuncs~typeSwitch.updater",
        "kind": "member",
        "memberof": "registerFuncs~typeSwitch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7507,
                7526
            ],
            "filename": "attribute_proxy.js",
            "lineno": 177,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001191",
                "name": "new",
                "type": "Identifier",
                "value": "initialSetups"
            }
        },
        "undocumented": true,
        "name": "new",
        "longname": "registerFuncs~typeSwitch.new",
        "kind": "member",
        "memberof": "registerFuncs~typeSwitch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7533,
                7548
            ],
            "filename": "attribute_proxy.js",
            "lineno": 178,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001193",
                "name": "default",
                "type": "Identifier",
                "value": "funcs"
            }
        },
        "undocumented": true,
        "name": "default",
        "longname": "registerFuncs~typeSwitch.default",
        "kind": "member",
        "memberof": "registerFuncs~typeSwitch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7562,
                7570
            ],
            "filename": "attribute_proxy.js",
            "lineno": 180,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001196",
                "name": "setState"
            }
        },
        "undocumented": true,
        "name": "setState",
        "longname": "registerFuncs~setState",
        "kind": "member",
        "memberof": "registerFuncs",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7769,
                7785
            ],
            "filename": "attribute_proxy.js",
            "lineno": 185,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001235",
                "name": "setState",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "setState",
        "longname": "<anonymous>~setState",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7842,
                7872
            ],
            "filename": "attribute_proxy.js",
            "lineno": 187,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001245",
                "name": "typeSwitch[undefined][undefined]",
                "type": "Identifier",
                "funcscope": "registerFuncs",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "undefined][undefined]",
        "longname": "registerFuncs~typeSwitch.undefined][undefined]",
        "kind": "member",
        "memberof": "registerFuncs~typeSwitch",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7883,
                7927
            ],
            "filename": "attribute_proxy.js",
            "lineno": 188,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001253",
                "name": "setState",
                "type": "ConditionalExpression",
                "funcscope": "<anonymous>",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "setState",
        "longname": "<anonymous>~setState",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8077,
                8093
            ],
            "filename": "attribute_proxy.js",
            "lineno": 191,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001270",
                "name": "setState",
                "type": "Literal",
                "funcscope": "<anonymous>",
                "value": false,
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "setState",
        "longname": "<anonymous>~setState",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8145,
                8181
            ],
            "filename": "attribute_proxy.js",
            "lineno": 197,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001276",
                "name": "kFuncs.registerFuncs",
                "type": "Identifier",
                "value": "registerFuncs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "registerFuncs",
        "longname": "kFuncs.registerFuncs",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8192,
                8680
            ],
            "filename": "attribute_proxy.js",
            "lineno": 199,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001282",
                "name": "setActionCalls",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "setActionCalls",
        "longname": "setActionCalls",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8219,
                8229
            ],
            "filename": "attribute_proxy.js",
            "lineno": 199,
            "columnno": 33,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001286",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8230,
                8238
            ],
            "filename": "attribute_proxy.js",
            "lineno": 199,
            "columnno": 44,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001288",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8343,
                8380
            ],
            "filename": "attribute_proxy.js",
            "lineno": 202,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001308",
                "name": "fieldAction",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "fieldAction",
        "longname": "<anonymous>~fieldAction",
        "kind": "member",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8450,
                8557
            ],
            "filename": "attribute_proxy.js",
            "lineno": 205,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001330",
                "name": "attributes[undefined]",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attributes[undefined]",
        "longname": "attributes[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8589,
                8662
            ],
            "filename": "attribute_proxy.js",
            "lineno": 208,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001355",
                "name": "attributes[undefined]",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attributes[undefined]",
        "longname": "attributes[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8683,
                8720
            ],
            "filename": "attribute_proxy.js",
            "lineno": 212,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001371",
                "name": "funcs.setActionCalls",
                "type": "Identifier",
                "value": "setActionCalls",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "setActionCalls",
        "longname": "funcs.setActionCalls",
        "kind": "member",
        "memberof": "funcs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Function to call a function previously registered to the funcs object. May not be used that much. Either returns the function or null if no function exists.\r\n * @param {string} funcName - The name of the function to invoke.\r\n * @param {...any} args - The arguments to call the function with.\r\n * @returns {any}\r\n * @example\r\n * //Call myFunc with two arguments\r\n * k.callFunc('myFunc','an argument','another argument');\r\n */",
        "meta": {
            "range": [
                9165,
                9386
            ],
            "filename": "attribute_proxy.js",
            "lineno": 223,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001377",
                "name": "callFunc",
                "type": "FunctionExpression"
            }
        },
        "description": "Function to call a function previously registered to the funcs object. May not be used that much. Either returns the function or null if no function exists.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The name of the function to invoke.",
                "name": "funcName"
            },
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "variable": true,
                "description": "The arguments to call the function with.",
                "name": "args"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                }
            }
        ],
        "examples": [
            "//Call myFunc with two arguments\rk.callFunc('myFunc','an argument','another argument');"
        ],
        "name": "callFunc",
        "longname": "callFunc",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9389,
                9415
            ],
            "filename": "attribute_proxy.js",
            "lineno": 232,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001414",
                "name": "kFuncs.callFunc",
                "type": "Identifier",
                "value": "callFunc",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "callFunc",
        "longname": "kFuncs.callFunc",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Alias for [setSectionOrder()](https://wiki.roll20.net/Sheet_Worker_Scripts#setSectionOrder.28.3CRepeating_Section_Name.3E.2C_.3CSection_Array.3E.2C_.3CCallback.3E.29) that allows you to use the section name in either `repeating_section` or `section` formats. Note that the Roll20 sheetworker [setSectionOrder](https://wiki.roll20.net/Sheet_Worker_Scripts#setSectionOrder.28.3CRepeating_Section_Name.3E.2C_.3CSection_Array.3E.2C_.3CCallback.3E.29) currently causes some display issues on sheets.\r\n * @param {string} section\r\n * @param {string[]} order\r\n * @returns {void}\r\n * @example\r\n * //Set the order of a repeating_weapon section\r\n * k.setSectionOrder('repeating_equipment',['id1','id2','id3']);\r\n * //Can also specify the section name without the repeating_ prefix\r\n * k.setSectionOrder('equipment',['id1','id2','id3']);\r\n */",
        "meta": {
            "range": [
                936,
                1076
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 14,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001422",
                "name": "_setSectionOrder",
                "type": "FunctionExpression"
            },
            "vars": {
                "trueSection": "_setSectionOrder~trueSection"
            }
        },
        "description": "Alias for [setSectionOrder()](https://wiki.roll20.net/Sheet_Worker_Scripts#setSectionOrder.28.3CRepeating_Section_Name.3E.2C_.3CSection_Array.3E.2C_.3CCallback.3E.29) that allows you to use the section name in either `repeating_section` or `section` formats. Note that the Roll20 sheetworker [setSectionOrder](https://wiki.roll20.net/Sheet_Worker_Scripts#setSectionOrder.28.3CRepeating_Section_Name.3E.2C_.3CSection_Array.3E.2C_.3CCallback.3E.29) currently causes some display issues on sheets.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "name": "section"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "name": "order"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "void"
                    ]
                }
            }
        ],
        "examples": [
            "//Set the order of a repeating_weapon section\rk.setSectionOrder('repeating_equipment',['id1','id2','id3']);\r//Can also specify the section name without the repeating_ prefix\rk.setSectionOrder('equipment',['id1','id2','id3']);"
        ],
        "name": "_setSectionOrder",
        "longname": "_setSectionOrder",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                987,
                1033
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 15,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001429",
                "name": "trueSection",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "trueSection",
        "longname": "_setSectionOrder~trueSection",
        "kind": "member",
        "memberof": "_setSectionOrder",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1079,
                1120
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 18,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001443",
                "name": "kFuncs.setSectionOrder",
                "type": "Identifier",
                "value": "_setSectionOrder",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "setSectionOrder",
        "longname": "kFuncs.setSectionOrder",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Alias for [removeRepeatingRow](https://wiki.roll20.net/Sheet_Worker_Scripts#removeRepeatingRow.28_RowID_.29) that also removes the row from the current object of attribute values and array of section IDs to ensure that erroneous updates are not issued.\r\n * @param {string} row - The row id to be removed\r\n * @param {attributesProxy} attributes - The attribute values currently in memory\r\n * @param {object} sections - Object that contains arrays of all the IDs in sections on the sheet indexed by repeating name.\r\n * @returns {void}\r\n * @example\r\n * //Remove a repeating Row\r\n * k.getAllAttrs({\r\n *  callback:(attributes,sections)=>{\r\n *    const rowID = sections.repeating_equipment[0];\r\n *    k.removeRepeatingRow(`repeating_equipment_${rowID}`,attributes,sections);\r\n *    console.log(sections.repeating_equipment); // => rowID no longer exists in the array.\r\n *    console.log(attributes[`repeating_equipment_${rowID}_name`]); // => undefined\r\n *  }\r\n * })\r\n */",
        "meta": {
            "range": [
                2106,
                2485
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 37,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001449",
                "name": "_removeRepeatingRow",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null,
                "undefined": null,
                "sections[undefined]": null
            }
        },
        "description": "Alias for [removeRepeatingRow](https://wiki.roll20.net/Sheet_Worker_Scripts#removeRepeatingRow.28_RowID_.29) that also removes the row from the current object of attribute values and array of section IDs to ensure that erroneous updates are not issued.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The row id to be removed",
                "name": "row"
            },
            {
                "type": {
                    "names": [
                        "attributesProxy"
                    ]
                },
                "description": "The attribute values currently in memory",
                "name": "attributes"
            },
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "Object that contains arrays of all the IDs in sections on the sheet indexed by repeating name.",
                "name": "sections"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "void"
                    ]
                }
            }
        ],
        "examples": [
            "//Remove a repeating Row\rk.getAllAttrs({\r callback:(attributes,sections)=>{\r   const rowID = sections.repeating_equipment[0];\r   k.removeRepeatingRow(`repeating_equipment_${rowID}`,attributes,sections);\r   console.log(sections.repeating_equipment); // => rowID no longer exists in the array.\r   console.log(attributes[`repeating_equipment_${rowID}_name`]); // => undefined\r }\r})"
        ],
        "name": "_removeRepeatingRow",
        "longname": "_removeRepeatingRow",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2391,
                2453
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 45,
            "columnno": 2,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001499",
                "name": "sections[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sections[undefined]",
        "longname": "sections[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2488,
                2535
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 48,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001519",
                "name": "kFuncs.removeRepeatingRow",
                "type": "Identifier",
                "value": "_removeRepeatingRow",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "removeRepeatingRow",
        "longname": "kFuncs.removeRepeatingRow",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Alias for [getAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getAttrs.28attributeNameArray.2C_callback.29) that converts the default object of attribute values into an {@link attributesProxy} and passes that back to the callback function.\r\n * @param {Object} args\r\n * @param {string[]} [args.props=baseGet] - Array of attribute names to get the value of. Defaults to {@link baseGet} if not passed.\r\n * @param {function(attributesProxy)} args.callback - The function to call after the attribute values have been gotten. An {@link attributesProxy} is passed to the callback.\r\n * @example\r\n * //Gets the attributes named in props.\r\n * k.getAttrs({\r\n *  props:['attribute_1','attribute_2'],\r\n *  callback:(attributes)=>{\r\n *    //Work with the attributes as you would in a normal getAttrs, or use the superpowers of the K-scaffold attributes object like so:\r\n *    attributes.attribute_1 = 'new value';\r\n *    attributes.set();\r\n *  }\r\n * })\r\n */",
        "meta": {
            "range": [
                3505,
                3668
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 66,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001525",
                "name": "_getAttrs",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Alias for [getAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getAttrs.28attributeNameArray.2C_callback.29) that converts the default object of attribute values into an {@link attributesProxy} and passes that back to the callback function.",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "args"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "baseGet",
                "description": "Array of attribute names to get the value of. Defaults to {@link baseGet} if not passed.",
                "name": "args.props"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call after the attribute values have been gotten. An {@link attributesProxy} is passed to the callback.",
                "name": "args.callback"
            }
        ],
        "examples": [
            "//Gets the attributes named in props.\rk.getAttrs({\r props:['attribute_1','attribute_2'],\r callback:(attributes)=>{\r   //Work with the attributes as you would in a normal getAttrs, or use the superpowers of the K-scaffold attributes object like so:\r   attributes.attribute_1 = 'new value';\r   attributes.set();\r }\r})"
        ],
        "name": "_getAttrs",
        "longname": "_getAttrs",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3527,
                3540
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 66,
            "columnno": 28,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001529",
                "name": "props",
                "type": "AssignmentPattern",
                "value": "props"
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "props",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3541,
                3549
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 66,
            "columnno": 42,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001533",
                "name": "callback",
                "type": "Identifier",
                "value": "callback"
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "callback",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3594,
                3630
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 68,
            "columnno": 10,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001544",
                "name": "attributes",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "<anonymous>~attributes",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3671,
                3698
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 72,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001554",
                "name": "kFuncs.getAttrs",
                "type": "Identifier",
                "value": "_getAttrs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAttrs",
        "longname": "kFuncs.getAttrs",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Alias for [getAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getAttrs.28attributeNameArray.2C_callback.29) and [getSectionIDs](https://wiki.roll20.net/Sheet_Worker_Scripts#getSectionIDs.28section_name.2Ccallback.29) that combines the actions of both sheetworker functions and converts the default object of attribute values into an {@link attributesProxy}. Also gets the details on how to handle all attributes from the master {@link cascades} object and.\r\n * @param {Object} args\r\n * @param {string[]} [args.props=baseGet] - Array of attribute names to get the value of. Defaults to {@link baseGet} if not passed.\r\n * @param {repeatingSectionDetails} sectionDetails - Array of details about a section to get the IDs for and attributes that need to be gotten. \r\n * @param {function(attributesProxy,sectionObj,expandedCascade):void} args.callback - The function to call after the attribute values have been gotten. An {@link attributesProxy} is passed to the callback along with a {@link sectionObj} and {@link expandedCascade}.\r\n * @example\r\n * //Get every K-scaffold linked attribute on the sheet\r\n * k.getAllAttrs({\r\n *  callback:(attributes,sections,casc)=>{\r\n *    //Work with the attributes as you please.\r\n *    attributes.some_attribute = 'a value';\r\n *    attributes.set();//Apply our change\r\n *  }\r\n * })\r\n */",
        "meta": {
            "range": [
                5044,
                5452
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 90,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001560",
                "name": "getAllAttrs",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Alias for [getAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getAttrs.28attributeNameArray.2C_callback.29) and [getSectionIDs](https://wiki.roll20.net/Sheet_Worker_Scripts#getSectionIDs.28section_name.2Ccallback.29) that combines the actions of both sheetworker functions and converts the default object of attribute values into an {@link attributesProxy}. Also gets the details on how to handle all attributes from the master {@link cascades} object and.",
        "params": [
            {
                "type": {
                    "names": [
                        "Object"
                    ]
                },
                "name": "args"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "optional": true,
                "defaultvalue": "baseGet",
                "description": "Array of attribute names to get the value of. Defaults to {@link baseGet} if not passed.",
                "name": "args.props"
            },
            {
                "type": {
                    "names": [
                        "repeatingSectionDetails"
                    ]
                },
                "description": "Array of details about a section to get the IDs for and attributes that need to be gotten.",
                "name": "sectionDetails"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call after the attribute values have been gotten. An {@link attributesProxy} is passed to the callback along with a {@link sectionObj} and {@link expandedCascade}.",
                "name": "args.callback"
            }
        ],
        "examples": [
            "//Get every K-scaffold linked attribute on the sheet\rk.getAllAttrs({\r callback:(attributes,sections,casc)=>{\r   //Work with the attributes as you please.\r   attributes.some_attribute = 'a value';\r   attributes.set();//Apply our change\r }\r})"
        ],
        "name": "getAllAttrs",
        "longname": "getAllAttrs",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5068,
                5081
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 90,
            "columnno": 30,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001564",
                "name": "props",
                "type": "AssignmentPattern",
                "value": "props"
            }
        },
        "undocumented": true,
        "name": "props",
        "longname": "props",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5082,
                5120
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 90,
            "columnno": 44,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001568",
                "name": "sectionDetails",
                "type": "AssignmentPattern",
                "value": "sectionDetails"
            }
        },
        "undocumented": true,
        "name": "sectionDetails",
        "longname": "sectionDetails",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5121,
                5129
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 90,
            "columnno": 83,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001572",
                "name": "callback",
                "type": "Identifier",
                "value": "callback"
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "callback",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5246,
                5282
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 93,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001595",
                "name": "attributes",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "<anonymous>~attributes",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5340,
                5390
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 95,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001606",
                "name": "casc",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "<anonymous>~casc",
        "kind": "constant",
        "memberof": "<anonymous>",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5455,
                5487
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 100,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001620",
                "name": "kFuncs.getAllAttrs",
                "type": "Identifier",
                "value": "getAllAttrs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getAllAttrs",
        "longname": "kFuncs.getAllAttrs",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Alias for [getSectionIDs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getSectionIDs.28section_name.2Ccallback.29) that allows you to iterate through several functions at once. Also assembles an array of repeating attributes to get.\r\n * @param {object[]} sectionDetails - Array of details about a section to get the IDs for and attributes that need to be gotten.\r\n * @param {string} sectionDetails.section - The full name of the repeating section including the `repeating_` prefix.\r\n * @param {string[]} sectionDetails.fields - Array of field names that need to be gotten from the repeating section\r\n * @param {function(string[],sectionObj)} callback - The function to call once all IDs have been gotten and the array of repating attributes to get has been assembled. The callback is passed the array of repating attributes to get and a {@link sectionObj}.\r\n * @example\r\n * // Get some section details\r\n * const sectionDetails = {\r\n *  {section:'repeating_equipment',fields:['name','weight','cost']},\r\n *  {section:'repeating_weapon',fields:['name','attack','damage']}\r\n * };\r\n * k.getSections(sectionDetails,(attributeNames,sections)=>{\r\n *  console.log(attributeNames);// => Array containing all row specific attribute names\r\n *  console.log(sections);// => Object with arrays containing the row ids. Indexed by section name (e.g. repeating_eqiupment)\r\n * })\r\n */",
        "meta": {
            "range": [
                6875,
                7582
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 119,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001626",
                "name": "getSections",
                "type": "FunctionExpression"
            },
            "vars": {
                "queueClone": "getSections~queueClone",
                "worker": "getSections~worker",
                "": null
            }
        },
        "description": "Alias for [getSectionIDs()](https://wiki.roll20.net/Sheet_Worker_Scripts#getSectionIDs.28section_name.2Ccallback.29) that allows you to iterate through several functions at once. Also assembles an array of repeating attributes to get.",
        "params": [
            {
                "type": {
                    "names": [
                        "Array.<object>"
                    ]
                },
                "description": "Array of details about a section to get the IDs for and attributes that need to be gotten.",
                "name": "sectionDetails"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The full name of the repeating section including the `repeating_` prefix.",
                "name": "sectionDetails.section"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                },
                "description": "Array of field names that need to be gotten from the repeating section",
                "name": "sectionDetails.fields"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "description": "The function to call once all IDs have been gotten and the array of repating attributes to get has been assembled. The callback is passed the array of repating attributes to get and a {@link sectionObj}.",
                "name": "callback"
            }
        ],
        "examples": [
            "// Get some section details\rconst sectionDetails = {\r {section:'repeating_equipment',fields:['name','weight','cost']},\r {section:'repeating_weapon',fields:['name','attack','damage']}\r};\rk.getSections(sectionDetails,(attributeNames,sections)=>{\r console.log(attributeNames);// => Array containing all row specific attribute names\r console.log(sections);// => Object with arrays containing the row ids. Indexed by section name (e.g. repeating_eqiupment)\r})"
        ],
        "name": "getSections",
        "longname": "getSections",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6931,
                6967
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 120,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001633",
                "name": "queueClone",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "queueClone",
        "longname": "getSections~queueClone",
        "kind": "member",
        "memberof": "getSections",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6978,
                7493
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 121,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001641",
                "name": "worker",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "detail": "getSections~worker~detail",
                "": null
            }
        },
        "undocumented": true,
        "name": "worker",
        "longname": "getSections~worker",
        "kind": "function",
        "memberof": "getSections",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7034,
                7056
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 122,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001653",
                "name": "detail",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "detail",
        "longname": "getSections~worker~detail",
        "kind": "member",
        "memberof": "getSections~worker",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7108,
                7138
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 124,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001669",
                "name": "sections[undefined]",
                "type": "Identifier",
                "value": "IDs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sections[undefined]",
        "longname": "sections[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7585,
                7617
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 144,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001754",
                "name": "kFuncs.getSections",
                "type": "Identifier",
                "value": "getSections",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "getSections",
        "longname": "kFuncs.getSections",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Alias for [setAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#setAttrs.28values.2Coptions.2Ccallback.29) that sets silently by default.\r\n * @param {object} obj - The object containting attributes to set\r\n * @param {boolean} [vocal=false] - Whether to set silently (default value) or not.\r\n * @param {function()} [callback] - The callback function to invoke after the setting has been completed. No arguments are passed to the callback function.\r\n * @example\r\n * //Set some attributes silently\r\n * k.setAttrs({attribute_1:'new value'})\r\n * //Set some attributes and triggers listeners\r\n * k.setAttrs({attribute_1:'new value',true})\r\n * //Set some attributes and call a callback function\r\n * k.setAttrs({attribute_1:'new value'},null,()=>{\r\n *  //Do something after the attribute is set\r\n * })\r\n */",
        "meta": {
            "range": [
                8565,
                8652
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 163,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001760",
                "name": "set",
                "type": "FunctionExpression"
            }
        },
        "description": "Alias for [setAttrs()](https://wiki.roll20.net/Sheet_Worker_Scripts#setAttrs.28values.2Coptions.2Ccallback.29) that sets silently by default.",
        "params": [
            {
                "type": {
                    "names": [
                        "object"
                    ]
                },
                "description": "The object containting attributes to set",
                "name": "obj"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "optional": true,
                "defaultvalue": false,
                "description": "Whether to set silently (default value) or not.",
                "name": "vocal"
            },
            {
                "type": {
                    "names": [
                        "function"
                    ]
                },
                "optional": true,
                "description": "The callback function to invoke after the setting has been completed. No arguments are passed to the callback function.",
                "name": "callback"
            }
        ],
        "examples": [
            "//Set some attributes silently\rk.setAttrs({attribute_1:'new value'})\r//Set some attributes and triggers listeners\rk.setAttrs({attribute_1:'new value',true})\r//Set some attributes and call a callback function\rk.setAttrs({attribute_1:'new value'},null,()=>{\r //Do something after the attribute is set\r})"
        ],
        "name": "set",
        "longname": "set",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8624,
                8637
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 164,
            "columnno": 16,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001774",
                "name": "silent",
                "type": "UnaryExpression",
                "value": "!vocal"
            }
        },
        "undocumented": true,
        "name": "silent",
        "longname": "silent",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8655,
                8676
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 166,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001779",
                "name": "kFuncs.setAttrs",
                "type": "Identifier",
                "value": "set",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "setAttrs",
        "longname": "kFuncs.setAttrs",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8687,
                8913
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 168,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001785",
                "name": "generateCustomID",
                "type": "FunctionExpression"
            },
            "vars": {
                "string": "generateCustomID~string",
                "rowID": "generateCustomID~rowID",
                "re": "generateCustomID~re"
            }
        },
        "undocumented": true,
        "name": "generateCustomID",
        "longname": "generateCustomID",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8761,
                8782
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 170,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001799",
                "name": "string",
                "type": "TemplateLiteral",
                "funcscope": "generateCustomID",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "string",
        "longname": "generateCustomID~string",
        "kind": "member",
        "memberof": "generateCustomID",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8792,
                8815
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 172,
            "columnno": 2,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001806",
                "name": "rowID",
                "type": "CallExpression",
                "funcscope": "generateCustomID",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "rowID",
        "longname": "generateCustomID~rowID",
        "kind": "member",
        "memberof": "generateCustomID",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8824,
                8863
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 173,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001811",
                "name": "re",
                "type": "NewExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "re",
        "longname": "generateCustomID~re",
        "kind": "member",
        "memberof": "generateCustomID",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "/**\r\n * Alias for generateRowID that adds the new id to the {@link sectionObj}. Also allows for creation of custom IDs that conform to the section ID requirements.\r\n * @param {sectionObj} sections\r\n * @param {string} [customText] - Custom text to start the ID with. This text should not be longer than the standard repeating section ID format.\r\n * @returns {string} - The created ID\r\n * @example\r\n * k.getAllAttrs({\r\n *  callback:(attributes,sections,casc)=>{\r\n *    //Create a new row ID\r\n *    const rowID = k.generateRowID('repeating_equipment',sections);\r\n *    console.log(rowID);// => -p8rg908ug0suzz\r\n *    //Create a custom row ID\r\n *    const customID = k.generateRowID('repeating_equipment',sections,'custom');\r\n *    console.log(customID);// => -custom98uadj89kj\r\n *  }\r\n * });\r\n */",
        "meta": {
            "range": [
                9721,
                10074
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 195,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001834",
                "name": "_generateRowID",
                "type": "FunctionExpression"
            },
            "vars": {
                "rowID": "_generateRowID~rowID",
                "section": "_generateRowID~section",
                "sections[undefined]": null
            }
        },
        "description": "Alias for generateRowID that adds the new id to the {@link sectionObj}. Also allows for creation of custom IDs that conform to the section ID requirements.",
        "params": [
            {
                "type": {
                    "names": [
                        "sectionObj"
                    ]
                },
                "name": "sections"
            },
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "optional": true,
                "description": "Custom text to start the ID with. This text should not be longer than the standard repeating section ID format.",
                "name": "customText"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "- The created ID"
            }
        ],
        "examples": [
            "k.getAllAttrs({\r callback:(attributes,sections,casc)=>{\r   //Create a new row ID\r   const rowID = k.generateRowID('repeating_equipment',sections);\r   console.log(rowID);// => -p8rg908ug0suzz\r   //Create a custom row ID\r   const customID = k.generateRowID('repeating_equipment',sections,'custom');\r   console.log(customID);// => -custom98uadj89kj\r }\r});"
        ],
        "name": "_generateRowID",
        "longname": "_generateRowID",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9784,
                9861
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 196,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001842",
                "name": "rowID",
                "type": "ConditionalExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "rowID",
        "longname": "_generateRowID~rowID",
        "kind": "member",
        "memberof": "_generateRowID",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9866,
                9955
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 199,
            "columnno": 2,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001852",
                "name": "section",
                "type": "ConditionalExpression",
                "funcscope": "_generateRowID",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "section",
        "longname": "_generateRowID~section",
        "kind": "member",
        "memberof": "_generateRowID",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9960,
                10003
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 202,
            "columnno": 2,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001866",
                "name": "sections[undefined]",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sections[undefined]",
        "longname": "sections[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10077,
                10114
            ],
            "filename": "sheetworker_aliases.js",
            "lineno": 206,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001891",
                "name": "kFuncs.generateRowID",
                "type": "Identifier",
                "value": "_generateRowID",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "generateRowID",
        "longname": "kFuncs.generateRowID",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                96,
                110
            ],
            "filename": "listeners.js",
            "lineno": 3,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001899",
                "name": "listeners",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "listeners",
        "longname": "listeners",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                119,
                411
            ],
            "filename": "listeners.js",
            "lineno": 4,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001903",
                "name": "baseGet",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "baseGet",
        "longname": "baseGet",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                328,
                382
            ],
            "filename": "listeners.js",
            "lineno": 9,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001945",
                "name": "listeners[undefined]",
                "type": "MemberExpression",
                "value": "detailObj.listenerFunc",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "listeners[undefined]",
        "longname": "listeners[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                414,
                438
            ],
            "filename": "listeners.js",
            "lineno": 13,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001958",
                "name": "kFuncs.baseGet",
                "type": "Identifier",
                "value": "baseGet",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "baseGet",
        "longname": "kFuncs.baseGet",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                447,
                885
            ],
            "filename": "listeners.js",
            "lineno": 14,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001964",
                "name": "registerEventHandlers",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "registerEventHandlers",
        "longname": "registerEventHandlers",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                528,
                555
            ],
            "filename": "listeners.js",
            "lineno": 16,
            "columnno": 9,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001977",
                "name": "funcKeys",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "funcKeys",
        "longname": "funcKeys",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                556,
                561
            ],
            "filename": "listeners.js",
            "lineno": 16,
            "columnno": 37,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100001983",
                "name": "funcs",
                "type": "Identifier",
                "value": "funcs"
            }
        },
        "undocumented": true,
        "name": "funcs",
        "longname": "funcs",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1021,
                1724
            ],
            "filename": "listeners.js",
            "lineno": 29,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002031",
                "name": "addItem",
                "type": "FunctionExpression"
            },
            "vars": {
                "undefined": null,
                "section": "addItem~section",
                "": null
            }
        },
        "undocumented": true,
        "name": "addItem",
        "longname": "addItem",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1110,
                1146
            ],
            "filename": "listeners.js",
            "lineno": 31,
            "columnno": 2,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002045",
                "name": "section",
                "type": "CallExpression",
                "funcscope": "addItem",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "section",
        "longname": "addItem~section",
        "kind": "member",
        "memberof": "addItem",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1170,
                1714
            ],
            "filename": "listeners.js",
            "lineno": 33,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002057",
                "name": "callback",
                "type": "ArrowFunctionExpression"
            },
            "vars": {
                "row": "callback~row",
                "attributes[undefined]": null,
                "trigger": "callback~trigger",
                "": null
            }
        },
        "undocumented": true,
        "name": "callback",
        "longname": "callback",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1222,
                1260
            ],
            "filename": "listeners.js",
            "lineno": 34,
            "columnno": 10,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002064",
                "name": "row",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "row",
        "longname": "callback~row",
        "kind": "member",
        "memberof": "callback",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1276,
                1279
            ],
            "filename": "listeners.js",
            "lineno": 35,
            "columnno": 13,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002074",
                "name": "row",
                "type": "Identifier",
                "value": "row"
            }
        },
        "undocumented": true,
        "name": "row",
        "longname": "row",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1290,
                1320
            ],
            "filename": "listeners.js",
            "lineno": 36,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002077",
                "name": "attributes[undefined]",
                "type": "Literal",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attributes[undefined]",
        "longname": "attributes[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1345,
                1355
            ],
            "filename": "listeners.js",
            "lineno": 37,
            "columnno": 22,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002089",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1356,
                1364
            ],
            "filename": "listeners.js",
            "lineno": 37,
            "columnno": 33,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002091",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1381,
                1432
            ],
            "filename": "listeners.js",
            "lineno": 38,
            "columnno": 12,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002094",
                "name": "trigger",
                "type": "MemberExpression",
                "value": "cascades[undefined]"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "callback~trigger",
        "kind": "constant",
        "memberof": "callback",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1586,
                1596
            ],
            "filename": "listeners.js",
            "lineno": 42,
            "columnno": 29,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002130",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1597,
                1605
            ],
            "filename": "listeners.js",
            "lineno": 42,
            "columnno": 40,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002132",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1606,
                1610
            ],
            "filename": "listeners.js",
            "lineno": 42,
            "columnno": 49,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002134",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1611,
                1618
            ],
            "filename": "listeners.js",
            "lineno": 42,
            "columnno": 54,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002136",
                "name": "trigger",
                "type": "Identifier",
                "value": "trigger"
            }
        },
        "undocumented": true,
        "name": "trigger",
        "longname": "trigger",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1680,
                1690
            ],
            "filename": "listeners.js",
            "lineno": 46,
            "columnno": 22,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002144",
                "name": "attributes",
                "type": "Identifier",
                "value": "attributes"
            }
        },
        "undocumented": true,
        "name": "attributes",
        "longname": "attributes",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1691,
                1699
            ],
            "filename": "listeners.js",
            "lineno": 46,
            "columnno": 33,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002146",
                "name": "sections",
                "type": "Identifier",
                "value": "sections"
            }
        },
        "undocumented": true,
        "name": "sections",
        "longname": "sections",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1700,
                1704
            ],
            "filename": "listeners.js",
            "lineno": 46,
            "columnno": 42,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002148",
                "name": "casc",
                "type": "Identifier",
                "value": "casc"
            }
        },
        "undocumented": true,
        "name": "casc",
        "longname": "casc",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1727,
                1750
            ],
            "filename": "listeners.js",
            "lineno": 50,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002151",
                "name": "funcs.addItem",
                "type": "Identifier",
                "value": "addItem",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "addItem",
        "longname": "funcs.addItem",
        "kind": "member",
        "memberof": "funcs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1761,
                2043
            ],
            "filename": "listeners.js",
            "lineno": 52,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002157",
                "name": "editSection",
                "type": "FunctionExpression"
            },
            "vars": {
                "undefined": null,
                "section": "editSection~section",
                "target": "editSection~target"
            }
        },
        "undocumented": true,
        "name": "editSection",
        "longname": "editSection",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1854,
                1891
            ],
            "filename": "listeners.js",
            "lineno": 54,
            "columnno": 2,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002171",
                "name": "section",
                "type": "CallExpression",
                "funcscope": "editSection",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "section",
        "longname": "editSection~section",
        "kind": "member",
        "memberof": "editSection",
        "scope": "inner"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1900,
                1956
            ],
            "filename": "listeners.js",
            "lineno": 55,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002180",
                "name": "target",
                "type": "TemplateLiteral",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "target",
        "longname": "editSection~target",
        "kind": "member",
        "memberof": "editSection",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2061,
                2072
            ],
            "filename": "listeners.js",
            "lineno": 59,
            "columnno": 15,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002206",
                "name": "editSection",
                "type": "Identifier",
                "value": "editSection"
            }
        },
        "undocumented": true,
        "name": "editSection",
        "longname": "editSection",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "/**\r\n * This stores the name of your sheet for use in the logging functions {@link log} and {@link debug}. Accessible by `k.sheetName`\r\n * @var\r\n * @type {string}\r\n */",
        "meta": {
            "range": [
                173,
                210
            ],
            "filename": "kvariables.js",
            "lineno": 6,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002211",
                "name": "sheetName",
                "type": "Literal",
                "value": "kScaffold Powered Sheet"
            }
        },
        "description": "This stores the name of your sheet for use in the logging functions {@link log} and {@link debug}. Accessible by `k.sheetName`",
        "kind": "member",
        "type": {
            "names": [
                "string"
            ]
        },
        "name": "sheetName",
        "longname": "sheetName",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                213,
                241
            ],
            "filename": "kvariables.js",
            "lineno": 7,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002215",
                "name": "kFuncs.sheetName",
                "type": "Identifier",
                "value": "sheetName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sheetName",
        "longname": "kFuncs.sheetName",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n\t* This stores the version of your sheet for use in the logging functions{@link log} and {@link debug}. It is also stored in the sheet_version attribute on your character sheet. Accessible via `k.version`\r\n\t* @var\r\n\t* @type {number}\r\n\t*/",
        "meta": {
            "range": [
                488,
                782
            ],
            "filename": "kvariables.js",
            "lineno": 13,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002221",
                "name": "docs.js['k.version']",
                "type": "ObjectExpression",
                "value": "{\"type\":\"number\",\"description\":\"This stores the version of your sheet for use in the logging functions [k.log](#klog) and [k.debug](#kdebug), and in the K-scaffolds sheet versioning handling. It is also stored in the sheet_version attribute on your character sheet.\"}",
                "paramnames": []
            }
        },
        "description": "This stores the version of your sheet for use in the logging functions{@link log} and {@link debug}. It is also stored in the sheet_version attribute on your character sheet. Accessible via `k.version`",
        "kind": "member",
        "type": {
            "names": [
                "number"
            ]
        },
        "name": "'k.version'",
        "longname": "docs.js.'k.version'",
        "memberof": "docs.js",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                515,
                528
            ],
            "filename": "kvariables.js",
            "lineno": 14,
            "columnno": 1,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002228",
                "name": "type",
                "type": "Literal",
                "value": "number"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "docs.js.'k.version'.type",
        "kind": "member",
        "memberof": "docs.js.'k.version'",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                532,
                779
            ],
            "filename": "kvariables.js",
            "lineno": 15,
            "columnno": 1,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002230",
                "name": "description",
                "type": "Literal",
                "value": "This stores the version of your sheet for use in the logging functions [k.log](#klog) and [k.debug](#kdebug), and in the K-scaffolds sheet versioning handling. It is also stored in the sheet_version attribute on your character sheet."
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "docs.js.'k.version'.description",
        "kind": "member",
        "memberof": "docs.js.'k.version'",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                789,
                800
            ],
            "filename": "kvariables.js",
            "lineno": 17,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002233",
                "name": "version",
                "type": "Literal",
                "value": 0
            }
        },
        "undocumented": true,
        "name": "version",
        "longname": "version",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                803,
                827
            ],
            "filename": "kvariables.js",
            "lineno": 18,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002237",
                "name": "kFuncs.version",
                "type": "Identifier",
                "value": "version",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "version",
        "longname": "kFuncs.version",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n\t* A boolean flag that tells the script whether to enable or disable {@link debug} calls. If the version of the sheet is `0`, or an attribute named `debug_mode` is found on opening this is set to true for your entire session. Otherwise, it remains false.\r\n\t* @var\r\n\t* @type {boolean}\r\n\t*/",
        "meta": {
            "range": [
                1125,
                1464
            ],
            "filename": "kvariables.js",
            "lineno": 24,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002243",
                "name": "docs.js['k.debugMode']",
                "type": "ObjectExpression",
                "value": "{\"type\":\"boolean\",\"description\":\"A boolean flag that tells the script whether to enable or disable [k.debug](#kdebug) calls. If the version of the sheet is `0`, or an attribute named `debug_mode` is found on opening this is set to true for all sheets you open from that point on. Otherwise, it remains false.\"}",
                "paramnames": []
            }
        },
        "description": "A boolean flag that tells the script whether to enable or disable {@link debug} calls. If the version of the sheet is `0`, or an attribute named `debug_mode` is found on opening this is set to true for your entire session. Otherwise, it remains false.",
        "kind": "member",
        "type": {
            "names": [
                "boolean"
            ]
        },
        "name": "'k.debugMode'",
        "longname": "docs.js.'k.debugMode'",
        "memberof": "docs.js",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1154,
                1168
            ],
            "filename": "kvariables.js",
            "lineno": 25,
            "columnno": 1,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002250",
                "name": "type",
                "type": "Literal",
                "value": "boolean"
            }
        },
        "undocumented": true,
        "name": "type",
        "longname": "docs.js.'k.debugMode'.type",
        "kind": "member",
        "memberof": "docs.js.'k.debugMode'",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1172,
                1461
            ],
            "filename": "kvariables.js",
            "lineno": 26,
            "columnno": 1,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002252",
                "name": "description",
                "type": "Literal",
                "value": "A boolean flag that tells the script whether to enable or disable [k.debug](#kdebug) calls. If the version of the sheet is `0`, or an attribute named `debug_mode` is found on opening this is set to true for all sheets you open from that point on. Otherwise, it remains false."
            }
        },
        "undocumented": true,
        "name": "description",
        "longname": "docs.js.'k.debugMode'.description",
        "kind": "member",
        "memberof": "docs.js.'k.debugMode'",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1471,
                1488
            ],
            "filename": "kvariables.js",
            "lineno": 28,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002255",
                "name": "debugMode",
                "type": "Literal",
                "value": false
            }
        },
        "undocumented": true,
        "name": "debugMode",
        "longname": "debugMode",
        "kind": "member",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1491,
                1519
            ],
            "filename": "kvariables.js",
            "lineno": 29,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002259",
                "name": "kFuncs.debugMode",
                "type": "Identifier",
                "value": "debugMode",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "debugMode",
        "longname": "kFuncs.debugMode",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1528,
                1538
            ],
            "filename": "kvariables.js",
            "lineno": 30,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002265",
                "name": "funcs",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "funcs",
        "longname": "funcs",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1541,
                1561
            ],
            "filename": "kvariables.js",
            "lineno": 31,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002269",
                "name": "kFuncs.funcs",
                "type": "Identifier",
                "value": "funcs",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "funcs",
        "longname": "kFuncs.funcs",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1570,
                1589
            ],
            "filename": "kvariables.js",
            "lineno": 32,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002275",
                "name": "updateHandlers",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "updateHandlers",
        "longname": "updateHandlers",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1598,
                1615
            ],
            "filename": "kvariables.js",
            "lineno": 33,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002279",
                "name": "openHandlers",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "openHandlers",
        "longname": "openHandlers",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1624,
                1642
            ],
            "filename": "kvariables.js",
            "lineno": 34,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002283",
                "name": "initialSetups",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "initialSetups",
        "longname": "initialSetups",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1651,
                1664
            ],
            "filename": "kvariables.js",
            "lineno": 35,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002287",
                "name": "addFuncs",
                "type": "ObjectExpression",
                "value": "{}"
            }
        },
        "undocumented": true,
        "name": "addFuncs",
        "longname": "addFuncs",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1675,
                1700
            ],
            "filename": "kvariables.js",
            "lineno": 37,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002291",
                "name": "kscaffoldJSVersion",
                "type": "Literal",
                "value": 0.3
            }
        },
        "undocumented": true,
        "name": "kscaffoldJSVersion",
        "longname": "kscaffoldJSVersion",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1709,
                1735
            ],
            "filename": "kvariables.js",
            "lineno": 38,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002295",
                "name": "kscaffoldPUGVersion",
                "type": "Literal",
                "value": 0.3
            }
        },
        "undocumented": true,
        "name": "kscaffoldPUGVersion",
        "longname": "kscaffoldPUGVersion",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "/**\r\n * Replaces problem characters to use a string as a regex\r\n * @param {string} text - The text to replace characters in\r\n * @returns {string}\r\n * @example\r\n * const textForRegex = k.sanitizeForRegex('.some thing[with characters]');\r\n * console.log(textForRegex);// => \"\\.some thing\\[with characters\\]\"\r\n */",
        "meta": {
            "range": [
                408,
                525
            ],
            "filename": "utility.js",
            "lineno": 11,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002301",
                "name": "sanitizeForRegex",
                "type": "FunctionExpression"
            }
        },
        "description": "Replaces problem characters to use a string as a regex",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The text to replace characters in",
                "name": "text"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "examples": [
            "const textForRegex = k.sanitizeForRegex('.some thing[with characters]');\rconsole.log(textForRegex);// => \"\\.some thing\\[with characters\\]\""
        ],
        "name": "sanitizeForRegex",
        "longname": "sanitizeForRegex",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                528,
                570
            ],
            "filename": "utility.js",
            "lineno": 14,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002314",
                "name": "kFuncs.sanitizeForRegex",
                "type": "Identifier",
                "value": "sanitizeForRegex",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "sanitizeForRegex",
        "longname": "kFuncs.sanitizeForRegex",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Converts a value to a number, it\\'s default value, or `0` if no default value passed.\r\n * @param {string|number} val - Value to convert to a number\r\n * @param {number} def - The default value, uses 0 if not passed\r\n * @returns {number|undefined}\r\n * @example\r\n * const num = k.value('100');\r\n * console.log(num);// => 100\r\n */",
        "meta": {
            "range": [
                917,
                972
            ],
            "filename": "utility.js",
            "lineno": 25,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002320",
                "name": "value",
                "type": "FunctionExpression"
            }
        },
        "description": "Converts a value to a number, it\\'s default value, or `0` if no default value passed.",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "description": "Value to convert to a number",
                "name": "val"
            },
            {
                "type": {
                    "names": [
                        "number"
                    ]
                },
                "description": "The default value, uses 0 if not passed",
                "name": "def"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "number",
                        "undefined"
                    ]
                }
            }
        ],
        "examples": [
            "const num = k.value('100');\rconsole.log(num);// => 100"
        ],
        "name": "value",
        "longname": "value",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                975,
                995
            ],
            "filename": "utility.js",
            "lineno": 28,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002334",
                "name": "kFuncs.value",
                "type": "Identifier",
                "value": "value",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "value",
        "longname": "kFuncs.value",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Extracts the section (e.g. `repeating_equipment`), rowID (e.g `-;lkj098J:LKj`), and field name (e.g. `bulk`) from a repeating attribute name.\r\n * @param {string} string - The string to parse\r\n * @returns {array} - Array of matches. Index 0: the section name, e.g. repeating_equipment | Index 1:the row ID | index 2: The name of the attribute\r\n * @returns {string[]}\r\n * @example\r\n * //Extract info from a full repeating name\r\n * const [section,rowID,attrName] = k.parseRepeatName('repeating_equipment_-8908asdflkjZlkj23_name');\r\n * console.log(section);// => \"repeating_equipment\"\r\n * console.log(rowID);// => \"-8908asdflkjZlkj23\"\r\n * console.log(attrName);// => \"name\"\r\n * \r\n * //Extract info from just a row name\r\n * const [section,rowID,attrName] = k.parseRepeatName('repeating_equipment_-8908asdflkjZlkj23');\r\n * console.log(section);// => \"repeating_equipment\"\r\n * console.log(rowID);// => \"-8908asdflkjZlkj23\"\r\n * console.log(attrName);// => undefined\r\n */",
        "meta": {
            "range": [
                1978,
                2119
            ],
            "filename": "utility.js",
            "lineno": 48,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002340",
                "name": "parseRepeatName",
                "type": "FunctionExpression"
            },
            "vars": {
                "match": "parseRepeatName~match"
            }
        },
        "description": "Extracts the section (e.g. `repeating_equipment`), rowID (e.g `-;lkj098J:LKj`), and field name (e.g. `bulk`) from a repeating attribute name.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to parse",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "description": "- Array of matches. Index 0: the section name, e.g. repeating_equipment | Index 1:the row ID | index 2: The name of the attribute"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "examples": [
            "//Extract info from a full repeating name\rconst [section,rowID,attrName] = k.parseRepeatName('repeating_equipment_-8908asdflkjZlkj23_name');\rconsole.log(section);// => \"repeating_equipment\"\rconsole.log(rowID);// => \"-8908asdflkjZlkj23\"\rconsole.log(attrName);// => \"name\"\r\r//Extract info from just a row name\rconst [section,rowID,attrName] = k.parseRepeatName('repeating_equipment_-8908asdflkjZlkj23');\rconsole.log(section);// => \"repeating_equipment\"\rconsole.log(rowID);// => \"-8908asdflkjZlkj23\"\rconsole.log(attrName);// => undefined"
        ],
        "name": "parseRepeatName",
        "longname": "parseRepeatName",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2021,
                2080
            ],
            "filename": "utility.js",
            "lineno": 49,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002346",
                "name": "match",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "match",
        "longname": "parseRepeatName~match",
        "kind": "member",
        "memberof": "parseRepeatName",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2122,
                2162
            ],
            "filename": "utility.js",
            "lineno": 53,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002361",
                "name": "kFuncs.parseRepeatName",
                "type": "Identifier",
                "value": "parseRepeatName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "parseRepeatName",
        "longname": "kFuncs.parseRepeatName",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Parses out the components of a trigger name similar to [parseRepeatName](#parserepeatname). Aliases: parseClickTrigger.\r\n * \r\n * Aliases: `k.parseClickTrigger`\r\n * @param {string} string The triggerName property of the\r\n * @returns {array} - For a repeating button named `repeating_equipment_-LKJhpoi98;lj_roll`, the array will be `['repeating_equipment','-LKJhpoi98;lj','roll']`. For a non repeating button named `roll`, the array will be `[undefined,undefined,'roll']`\r\n * @returns {string[]}\r\n * @example\r\n * //Parse a non repeating trigger\r\n * const [section,rowID,attrName] = k.parseTriggerName('clicked:some-button');\r\n * console.log(section);// => undefined\r\n * console.log(rowID);// => undefined\r\n * console.log(attrName);// => \"some-button\"\r\n * \r\n * //Parse a repeating trigger\r\n * const [section,rowID,attrName] = k.parseTriggerName('clicked:repeating_attack_-234lkjpd8fu8usadf_some-button');\r\n * console.log(section);// => \"repeating_attack\"\r\n * console.log(rowID);// => \"-234lkjpd8fu8usadf\"\r\n * console.log(attrName);// => \"some-button\"\r\n * \r\n * //Parse a repeating name\r\n * const [section,rowID,attrName] = k.parseTriggerName('repeating_attack_-234lkjpd8fu8usadf_some-button');\r\n * console.log(section);// => \"repeating_attack\"\r\n * console.log(rowID);// => \"-234lkjpd8fu8usadf\"\r\n * console.log(attrName);// => \"some-button\"\r\n */",
        "meta": {
            "range": [
                3524,
                3690
            ],
            "filename": "utility.js",
            "lineno": 81,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002367",
                "name": "parseTriggerName",
                "type": "FunctionExpression"
            },
            "vars": {
                "match": "parseTriggerName~match"
            }
        },
        "description": "Parses out the components of a trigger name similar to [parseRepeatName](#parserepeatname). Aliases: parseClickTrigger.\r\rAliases: `k.parseClickTrigger`",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The triggerName property of the",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "description": "- For a repeating button named `repeating_equipment_-LKJhpoi98;lj_roll`, the array will be `['repeating_equipment','-LKJhpoi98;lj','roll']`. For a non repeating button named `roll`, the array will be `[undefined,undefined,'roll']`"
            },
            {
                "type": {
                    "names": [
                        "Array.<string>"
                    ]
                }
            }
        ],
        "examples": [
            "//Parse a non repeating trigger\rconst [section,rowID,attrName] = k.parseTriggerName('clicked:some-button');\rconsole.log(section);// => undefined\rconsole.log(rowID);// => undefined\rconsole.log(attrName);// => \"some-button\"\r\r//Parse a repeating trigger\rconst [section,rowID,attrName] = k.parseTriggerName('clicked:repeating_attack_-234lkjpd8fu8usadf_some-button');\rconsole.log(section);// => \"repeating_attack\"\rconsole.log(rowID);// => \"-234lkjpd8fu8usadf\"\rconsole.log(attrName);// => \"some-button\"\r\r//Parse a repeating name\rconst [section,rowID,attrName] = k.parseTriggerName('repeating_attack_-234lkjpd8fu8usadf_some-button');\rconsole.log(section);// => \"repeating_attack\"\rconsole.log(rowID);// => \"-234lkjpd8fu8usadf\"\rconsole.log(attrName);// => \"some-button\""
        ],
        "name": "parseTriggerName",
        "longname": "parseTriggerName",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3568,
                3651
            ],
            "filename": "utility.js",
            "lineno": 82,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002373",
                "name": "match",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "match",
        "longname": "parseTriggerName~match",
        "kind": "member",
        "memberof": "parseTriggerName",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3693,
                3735
            ],
            "filename": "utility.js",
            "lineno": 86,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002393",
                "name": "kFuncs.parseTriggerName",
                "type": "Identifier",
                "value": "parseTriggerName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "parseTriggerName",
        "longname": "kFuncs.parseTriggerName",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3744,
                3780
            ],
            "filename": "utility.js",
            "lineno": 87,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002399",
                "name": "parseClickTrigger",
                "type": "Identifier",
                "value": "parseTriggerName"
            }
        },
        "undocumented": true,
        "name": "parseClickTrigger",
        "longname": "parseClickTrigger",
        "kind": "constant",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                3783,
                3827
            ],
            "filename": "utility.js",
            "lineno": 88,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002403",
                "name": "kFuncs.parseClickTrigger",
                "type": "Identifier",
                "value": "parseClickTrigger",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "parseClickTrigger",
        "longname": "kFuncs.parseClickTrigger",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Parses out the attribute name from the htmlattribute name.\r\n * @param {string} string - The triggerName property of the [event](https://wiki.roll20.net/Sheet_Worker_Scripts#eventInfo_Object).\r\n * @returns {string}\r\n * @example\r\n * //Parse a name\r\n * const attrName = k.parseHtmlName('attr_attribute_1');\r\n * console.log(attrName);// => \"attribute_1\"\r\n */",
        "meta": {
            "range": [
                4202,
                4331
            ],
            "filename": "utility.js",
            "lineno": 99,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002409",
                "name": "parseHTMLName",
                "type": "FunctionExpression"
            },
            "vars": {
                "match": "parseHTMLName~match"
            }
        },
        "description": "Parses out the attribute name from the htmlattribute name.",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The triggerName property of the [event](https://wiki.roll20.net/Sheet_Worker_Scripts#eventInfo_Object).",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "examples": [
            "//Parse a name\rconst attrName = k.parseHtmlName('attr_attribute_1');\rconsole.log(attrName);// => \"attribute_1\""
        ],
        "name": "parseHTMLName",
        "longname": "parseHTMLName",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4243,
                4289
            ],
            "filename": "utility.js",
            "lineno": 100,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002415",
                "name": "match",
                "type": "CallExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "match",
        "longname": "parseHTMLName~match",
        "kind": "member",
        "memberof": "parseHTMLName",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4334,
                4370
            ],
            "filename": "utility.js",
            "lineno": 104,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002432",
                "name": "kFuncs.parseHTMLName",
                "type": "Identifier",
                "value": "parseHTMLName",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "parseHTMLName",
        "longname": "kFuncs.parseHTMLName",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Capitalize each word in a string\r\n * @param {string} string - The string to capitalize\r\n * @returns {string}\r\n * @example\r\n * const capitalized = k.capitalize('a word');\r\n * console.log(capitalized);// => \"A Word\"\r\n */",
        "meta": {
            "range": [
                4609,
                4722
            ],
            "filename": "utility.js",
            "lineno": 114,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002438",
                "name": "capitalize",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Capitalize each word in a string",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to capitalize",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                }
            }
        ],
        "examples": [
            "const capitalized = k.capitalize('a word');\rconsole.log(capitalized);// => \"A Word\""
        ],
        "name": "capitalize",
        "longname": "capitalize",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                4725,
                4755
            ],
            "filename": "utility.js",
            "lineno": 117,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002456",
                "name": "kFuncs.capitalize",
                "type": "Identifier",
                "value": "capitalize",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "capitalize",
        "longname": "kFuncs.capitalize",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Extracts a roll query result for use in later functions. Must be awaited as per [startRoll documentation](https://wiki.roll20.net/Sheet_Worker_Scripts#Roll_Parsing.28NEW.29). Stolen from [Oosh\\'s Adventures with Startroll thread](https://app.roll20.net/forum/post/10346883/adventures-with-startroll).\r\n * @param {string} query - The query should be just the text as the `?{` and `}` at the start/end of the query are added by the function.\r\n * @returns {Promise} - Resolves to the selected value from the roll query\r\n * @example\r\n * const rollFunction = async function(){\r\n *  //Get the result of a choose from list query\r\n *  const queryResult = await extractQueryResult('Prompt Text Here|Option 1|Option 2');\r\n *  console.log(queryResult);//=> \"Option 1\" or \"Option 2\" depending on what the user selects\r\n * \r\n *  //Get free from input from the user\r\n *  const freeResult = await extractQueryResult('Prompt Text Here');\r\n *  consoel.log(freeResult);// => Whatever the user entered\r\n * }\r\n */",
        "meta": {
            "range": [
                5769,
                6042
            ],
            "filename": "utility.js",
            "lineno": 134,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002462",
                "name": "extractQueryResult",
                "type": "FunctionExpression"
            },
            "vars": {
                "queryRoll": "extractQueryResult~queryRoll"
            }
        },
        "description": "Extracts a roll query result for use in later functions. Must be awaited as per [startRoll documentation](https://wiki.roll20.net/Sheet_Worker_Scripts#Roll_Parsing.28NEW.29). Stolen from [Oosh\\'s Adventures with Startroll thread](https://app.roll20.net/forum/post/10346883/adventures-with-startroll).",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The query should be just the text as the `?{` and `}` at the start/end of the query are added by the function.",
                "name": "query"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "- Resolves to the selected value from the roll query"
            }
        ],
        "examples": [
            "const rollFunction = async function(){\r //Get the result of a choose from list query\r const queryResult = await extractQueryResult('Prompt Text Here|Option 1|Option 2');\r console.log(queryResult);//=> \"Option 1\" or \"Option 2\" depending on what the user selects\r\r //Get free from input from the user\r const freeResult = await extractQueryResult('Prompt Text Here');\r consoel.log(freeResult);// => Whatever the user entered\r}"
        ],
        "name": "extractQueryResult",
        "longname": "extractQueryResult",
        "kind": "function",
        "scope": "global",
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                5859,
                5928
            ],
            "filename": "utility.js",
            "lineno": 136,
            "columnno": 5,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002472",
                "name": "queryRoll",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "queryRoll",
        "longname": "extractQueryResult~queryRoll",
        "kind": "member",
        "memberof": "extractQueryResult",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6045,
                6091
            ],
            "filename": "utility.js",
            "lineno": 140,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002501",
                "name": "kFuncs.extractQueryResult",
                "type": "Identifier",
                "value": "extractQueryResult",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "extractQueryResult",
        "longname": "kFuncs.extractQueryResult",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Simulates a query for ensuring that async/await works correctly in the sheetworker environment when doing conditional startRolls. E.g. if you have an if/else and only one of the conditions results in `startRoll` being called (and thus an `await`), the sheetworker environment would normally crash. Awaiting this in the condition that does not actually need to call `startRoll` will keep the environment in sync.\r\n * @param {string|number} [value] - The value to return. Optional.\r\n * @returns {Promise} - Resolves to the value passed to the function\r\n * @example\r\n * const rollFunction = async function(){\r\n *  //Get the result of a choose from list query\r\n *  const queryResult = await pseudoQuery('a value');\r\n *  console.log(queryResult);//=> \"a value\"\r\n * }\r\n */",
        "meta": {
            "range": [
                6878,
                7134
            ],
            "filename": "utility.js",
            "lineno": 153,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002507",
                "name": "pseudoQuery",
                "type": "FunctionExpression"
            },
            "vars": {
                "queryRoll": "pseudoQuery~queryRoll"
            }
        },
        "description": "Simulates a query for ensuring that async/await works correctly in the sheetworker environment when doing conditional startRolls. E.g. if you have an if/else and only one of the conditions results in `startRoll` being called (and thus an `await`), the sheetworker environment would normally crash. Awaiting this in the condition that does not actually need to call `startRoll` will keep the environment in sync.",
        "params": [
            {
                "type": {
                    "names": [
                        "string",
                        "number"
                    ]
                },
                "optional": true,
                "description": "The value to return. Optional.",
                "name": "value"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "Promise"
                    ]
                },
                "description": "- Resolves to the value passed to the function"
            }
        ],
        "examples": [
            "const rollFunction = async function(){\r //Get the result of a choose from list query\r const queryResult = await pseudoQuery('a value');\r console.log(queryResult);//=> \"a value\"\r}"
        ],
        "name": "pseudoQuery",
        "longname": "pseudoQuery",
        "kind": "function",
        "scope": "global",
        "async": true
    },
    {
        "comment": "",
        "meta": {
            "range": [
                6954,
                7020
            ],
            "filename": "utility.js",
            "lineno": 155,
            "columnno": 5,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002517",
                "name": "queryRoll",
                "type": "AwaitExpression",
                "value": ""
            }
        },
        "undocumented": true,
        "name": "queryRoll",
        "longname": "pseudoQuery~queryRoll",
        "kind": "member",
        "memberof": "pseudoQuery",
        "scope": "inner",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                7137,
                7169
            ],
            "filename": "utility.js",
            "lineno": 159,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002546",
                "name": "kFuncs.pseudoQuery",
                "type": "Identifier",
                "value": "pseudoQuery",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "pseudoQuery",
        "longname": "kFuncs.pseudoQuery",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * An alias for console.log.\r\n * @param {any} msg - The message can be a straight string, an object, or an array. If it is an object or array, the object will be broken down so that each key is used as a label to output followed by the value of that key. If the value of the key is an object or array, it will be output via `console.table`.\r\n */",
        "meta": {
            "range": [
                7532,
                8048
            ],
            "filename": "utility.js",
            "lineno": 165,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002552",
                "name": "log",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "An alias for console.log.",
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "The message can be a straight string, an object, or an array. If it is an object or array, the object will be broken down so that each key is used as a label to output followed by the value of that key. If the value of the key is an object or array, it will be output via `console.table`.",
                "name": "msg"
            }
        ],
        "name": "log",
        "longname": "log",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                8051,
                8067
            ],
            "filename": "utility.js",
            "lineno": 179,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002650",
                "name": "kFuncs.log",
                "type": "Identifier",
                "value": "log",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "log",
        "longname": "kFuncs.log",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Alias for console.log that only triggers when debug mode is enabled or when the sheet\\'s version is `0`. Useful for entering test logs that will not pollute the console on the live sheet.\r\n * @param {any} msg - 'See {@link k.log}\r\n * @param {boolean} force - Pass as a truthy value to force the debug output to be output to the console regardless of debug mode.\r\n * @returns {void}\r\n */",
        "meta": {
            "range": [
                8474,
                9107
            ],
            "filename": "utility.js",
            "lineno": 187,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002656",
                "name": "debug",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Alias for console.log that only triggers when debug mode is enabled or when the sheet\\'s version is `0`. Useful for entering test logs that will not pollute the console on the live sheet.",
        "params": [
            {
                "type": {
                    "names": [
                        "any"
                    ]
                },
                "description": "'See {@link k.log}",
                "name": "msg"
            },
            {
                "type": {
                    "names": [
                        "boolean"
                    ]
                },
                "description": "Pass as a truthy value to force the debug output to be output to the console regardless of debug mode.",
                "name": "force"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "void"
                    ]
                }
            }
        ],
        "name": "debug",
        "longname": "debug",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9110,
                9130
            ],
            "filename": "utility.js",
            "lineno": 202,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002770",
                "name": "kFuncs.debug",
                "type": "Identifier",
                "value": "debug",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "debug",
        "longname": "kFuncs.debug",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Orders the section id arrays for all sections in the `sections` object to match the repOrder attribute.\r\n * @param {attributesProxy} attributes - The attributes object that must have a value for the reporder for each section.\r\n * @param {[object]} sections - Object containing the IDs for the repeating sections, indexed by repeating section name.\r\n */",
        "meta": {
            "range": [
                9503,
                9790
            ],
            "filename": "utility.js",
            "lineno": 209,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002776",
                "name": "orderSections",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Orders the section id arrays for all sections in the `sections` object to match the repOrder attribute.",
        "params": [
            {
                "type": {
                    "names": [
                        "attributesProxy"
                    ]
                },
                "description": "The attributes object that must have a value for the reporder for each section.",
                "name": "attributes"
            },
            {}
        ],
        "name": "orderSections",
        "longname": "orderSections",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9601,
                9695
            ],
            "filename": "utility.js",
            "lineno": 211,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002795",
                "name": "attributes.attributes[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "attributes[undefined]",
        "longname": "attributes.attributes[undefined]",
        "kind": "member",
        "memberof": "attributes",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                9793,
                9829
            ],
            "filename": "utility.js",
            "lineno": 215,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002827",
                "name": "kFuncs.orderSections",
                "type": "Identifier",
                "value": "orderSections",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "orderSections",
        "longname": "kFuncs.orderSections",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Orders a single ID array.\r\n * @param {[string]} repOrder - Array of IDs in the order they are in on the sheet.\r\n * @param {[string]} IDs - Array of IDs to be ordered.\r\n */",
        "meta": {
            "range": [
                10021,
                10176
            ],
            "filename": "utility.js",
            "lineno": 222,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002833",
                "name": "orderSection",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "description": "Orders a single ID array.",
        "params": [
            {},
            {}
        ],
        "name": "orderSection",
        "longname": "orderSection",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10179,
                10213
            ],
            "filename": "utility.js",
            "lineno": 227,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002869",
                "name": "kFuncs.orderSection",
                "type": "Identifier",
                "value": "orderSection",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "orderSection",
        "longname": "kFuncs.orderSection",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "/**\r\n * Splits a comma delimited string into an array\r\n * @param {string} string - The string to split.\r\n * @returns {array} - The string segments of the comma delimited list.\r\n */",
        "meta": {
            "range": [
                10406,
                10491
            ],
            "filename": "utility.js",
            "lineno": 234,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002875",
                "name": "commaArray",
                "type": "FunctionExpression"
            }
        },
        "description": "Splits a comma delimited string into an array",
        "params": [
            {
                "type": {
                    "names": [
                        "string"
                    ]
                },
                "description": "The string to split.",
                "name": "string"
            }
        ],
        "returns": [
            {
                "type": {
                    "names": [
                        "array"
                    ]
                },
                "description": "- The string segments of the comma delimited list."
            }
        ],
        "name": "commaArray",
        "longname": "commaArray",
        "kind": "function",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                10494,
                10524
            ],
            "filename": "utility.js",
            "lineno": 237,
            "columnno": 0,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002892",
                "name": "kFuncs.commaArray",
                "type": "Identifier",
                "value": "commaArray",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "commaArray",
        "longname": "kFuncs.commaArray",
        "kind": "member",
        "memberof": "kFuncs",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                227,
                743
            ],
            "filename": "parse_cascade.js",
            "lineno": 7,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002900",
                "name": "expandCascade",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "expandCascade",
        "longname": "expandCascade",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                754,
                2008
            ],
            "filename": "parse_cascade.js",
            "lineno": 18,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002949",
                "name": "expandRepeating",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "expandRepeating",
        "longname": "expandRepeating",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                964,
                1026
            ],
            "filename": "parse_cascade.js",
            "lineno": 21,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100002983",
                "name": "memo[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "memo[undefined]",
        "longname": "memo[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1101,
                1176
            ],
            "filename": "parse_cascade.js",
            "lineno": 22,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003004",
                "name": "memo[undefined].name",
                "type": "TemplateLiteral",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "name",
        "longname": "memo[undefined].name",
        "kind": "member",
        "memberof": "memo[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                1223,
                1979
            ],
            "filename": "parse_cascade.js",
            "lineno": 24,
            "columnno": 8,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003035",
                "name": "memo[undefined].affects",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "affects",
        "longname": "memo[undefined].affects",
        "kind": "member",
        "memberof": "memo[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2019,
                2125
            ],
            "filename": "parse_cascade.js",
            "lineno": 39,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003109",
                "name": "applyID",
                "type": "FunctionExpression"
            }
        },
        "undocumented": true,
        "name": "applyID",
        "longname": "applyID",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2136,
                2514
            ],
            "filename": "parse_cascade.js",
            "lineno": 43,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003126",
                "name": "expandNormal",
                "type": "FunctionExpression"
            },
            "vars": {
                "memo[undefined]": null,
                "memo[undefined].affects": "memo[undefined].affects",
                "": null
            }
        },
        "undocumented": true,
        "name": "expandNormal",
        "longname": "expandNormal",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2191,
                2224
            ],
            "filename": "parse_cascade.js",
            "lineno": 44,
            "columnno": 2,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003135",
                "name": "memo[undefined]",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "memo[undefined]",
        "longname": "memo[undefined]",
        "kind": "member",
        "scope": "global"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2263,
                2306
            ],
            "filename": "parse_cascade.js",
            "lineno": 46,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003154",
                "name": "memo[undefined].affects",
                "type": "LogicalExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "affects",
        "longname": "memo[undefined].affects",
        "kind": "member",
        "memberof": "memo[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2313,
                2505
            ],
            "filename": "parse_cascade.js",
            "lineno": 47,
            "columnno": 4,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003168",
                "name": "memo[undefined].affects",
                "type": "CallExpression",
                "value": "",
                "paramnames": []
            }
        },
        "undocumented": true,
        "name": "affects",
        "longname": "memo[undefined].affects",
        "kind": "member",
        "memberof": "memo[undefined]",
        "scope": "static"
    },
    {
        "comment": "",
        "meta": {
            "range": [
                2525,
                2735
            ],
            "filename": "parse_cascade.js",
            "lineno": 58,
            "columnno": 6,
            "path": "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold",
            "code": {
                "id": "astnode100003210",
                "name": "addAllRows",
                "type": "FunctionExpression"
            },
            "vars": {
                "": null
            }
        },
        "undocumented": true,
        "name": "addAllRows",
        "longname": "addAllRows",
        "kind": "function",
        "scope": "global",
        "params": []
    },
    {
        "kind": "package",
        "longname": "package:undefined",
        "files": [
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\scaffold_type_definitions\\constant_definitions.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\scaffold_type_definitions\\attributesProxy.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\accessSheet.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\attribute_proxy.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\sheetworker_aliases.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\listeners.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\kvariables.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\utility.js",
            "G:\\My Drive\\Git\\Roll20-Snippets\\K_Scaffold\\Template v2\\scaffold\\parse_cascade.js"
        ]
    }
]
